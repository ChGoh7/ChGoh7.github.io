import{_ as i,c as a,a as t,o as n}from"./app-WgtuMpBp.js";const h={};function e(l,s){return n(),a("div",null,s[0]||(s[0]=[t(`<p>Regular expression 简称：RegExp</p><blockquote><p>正则表达式：对字符串执行模式匹配的技术。一个正则表达式，就是用某种模式去匹配字符串的一个公式。除 Java 外，还有许多语言支持正则表达式。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HeruinKCoin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">				//对象文本</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[A-Z]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">					//[1] 创建规则</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Pattern</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//[2] 创建模式对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Matcher</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//[3] 创建匹配器</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()){</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">						//[4] find() 是否找到下一个</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">group</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//[5] group(0) 输出找到的当前对象</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="https://gitee.com/kilomi/pic-bed/raw/master/img/202311101802722.png" alt="image-20231110180206653">在这里matcher.group(0),返回的是0到1这个两个索引表示的字符串。</p><p><img src="https://gitee.com/kilomi/pic-bed/raw/master/img/202311101757453.png" alt="image-20231110175724388"></p><p><code>Matcher</code> 底层维护了一个 <code>group[]</code> 数组。如果 <strong>[4]</strong> 在文本里匹配到对象，会在 <code>group[0]</code> 记载该起始位置 n1，在 <code>group[1]</code> 记录该结束位置的下一位 n2。即 [n1,n2) 为匹配的字符串，n2 位置是下次匹配的起始位置。</p><p>当 <strong>[1]</strong> 创建的规则包含分组（如 <code>String regular = &quot;(\\\\d\\\\d)(\\\\d\\\\d)&quot;;</code>），则第一组的起止位置记录在 <code>group[2]</code>、<code>group[3]</code>，第二组在 <code>group[4]</code>、<code>group[5]</code>。以此类推。这时，<strong>[5]</strong> 的 <code>group(0)</code> 代表输出全部，<code>group[1]</code> 代表输出第一组，group[2]表示输出第二组，以此类推。</p></blockquote><h2 id="_25-1-语法" tabindex="-1"><a class="header-anchor" href="#_25-1-语法"><span>25.1 语法</span></a></h2><p><strong>元字符</strong></p><ul><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ul><h3 id="_25-1-1-转义符号" tabindex="-1"><a class="header-anchor" href="#_25-1-1-转义符号"><span>25.1.1 转义符号 <code>\\</code></span></a></h3><p>使用正则表达式去检索某些特殊字符时，需要加上转义符号（如：<code>(</code> 需要写成 <code>\\(</code>）</p><p>在 Java 的正则表达式中，<code>\\\\</code> 代表一个 <code>\\</code>。</p><p><mark>需要用到转义符号的字符有</mark>：<code>.</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>$</code>、<code>/</code>、<code>\\</code>、<code>?</code>、<code>[</code>、<code>]</code>、<code>^</code>、<code>{</code>、<code>}</code></p><h3 id="_25-1-2-字符匹配符" tabindex="-1"><a class="header-anchor" href="#_25-1-2-字符匹配符"><span>25.1.2 字符匹配符</span></a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>[ ]</code></td><td>可接收的字符列表</td><td><code>[abcd]</code></td><td>abcd 中的任一字符</td></tr><tr><td><code>[^]</code></td><td>不接收的字符列表</td><td><code>[^abcd]</code></td><td>非 abcd 的任意字符</td></tr><tr><td><code>-</code></td><td>连字符</td><td><code>[a-z]</code></td><td>a - z 中的任意字符</td></tr><tr><td><code>.</code></td><td>除了斜杆n、斜杆r、斜杆r和斜杆n，都匹配；</td><td><code>a..b</code></td><td>a 开头，b结尾，中间含 2 字符</td></tr><tr><td><code>\\d</code></td><td>匹配单个数字字符，相当于[0-9]</td><td><code>\\d{3}(\\d)?</code></td><td>包含 3 个数字，或4个数字的字符串，<code>（\\d）?</code>要注意，这个很有用,表示前面的条件加这个条件，但是这个条件只是可能存在第四个数字。</td></tr><tr><td><code>\\D</code></td><td>匹配单个非数字字符，相当于<code>[^0-9]</code></td><td><code>\\D(\\d)*</code></td><td>单个非数字字符开头，后接任意个数字字符</td></tr><tr><td><code>\\w</code></td><td>匹配单个数字、<mark>下划线</mark>、大小写字母字符，相当于[0-9a-zA-Z_]</td><td><code>\\w{2}\\d{3}</code></td><td>2 个数字字母字符开头(任意组合，全为数字，全为字符或者都有)，后接 3 个数字字符</td></tr><tr><td><code>\\W</code></td><td>匹配单个非数字、非大小写字母字符,相当于<code>[^0-9a-zA-Z_]</code></td><td><code>\\W+\\d{2}</code></td><td>以至少 1 个非数字字母字符开头，后接 2 个数字字符</td></tr><tr><td><code>\\s</code></td><td>匹配空白字符（空格、制表位等）</td><td></td><td></td></tr><tr><td><code>\\S</code></td><td>匹配非空白字符</td><td></td><td></td></tr></tbody></table><ul><li><p>关于 <code>.</code>：特别地，出现 <code>[.]</code> 的场合，那个小圆点依然表示小圆点。<code>[?]</code> 同理，表示问号</p></li><li><p><mark>正则表达式默认区分大小写。要不区分大小写，就加上 <code>(?i)</code></mark></p><ul><li><p><code>(?i)abc</code>：即 abc 都不区分大小写</p></li><li><p><code>a(?i)bc</code>：即仅 bc 不区分大小写</p></li><li><p><code>a((?i)b)c</code>：即仅 b 不区分大小写</p></li><li><p>创建模式对象时，若如此做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Pattern</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CASE_INSENSITIVE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><p>这个场合，也能不区分大小写。</p><h3 id="_25-1-3-选择匹配符" tabindex="-1"><a class="header-anchor" href="#_25-1-3-选择匹配符"><span>25.1.3 选择匹配符 <code>|</code></span></a></h3><p>……我的感想是，和 Java 的逻辑或 <code>|</code> 一样！</p><h3 id="_25-1-4-限定符" tabindex="-1"><a class="header-anchor" href="#_25-1-4-限定符"><span>25.1.4 限定符</span></a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>*</code></td><td>指定字符重复任意次（可以为 0 次）</td><td><code>(abc)*</code></td><td>仅包含任意个 abc 字符串的字符串</td></tr><tr><td><code>+</code></td><td>指定字符重复至少一次</td><td><code>m+(abc)*</code></td><td>以任意个 m 开头，后面可以有 abc 字符串的字符串</td></tr><tr><td><code>?</code></td><td>指定字符重复最多一次（可以为 0 次）</td><td><code>m+abc?</code></td><td>以任意个 m 开头，后面可以有最多一个 abc 字符串的字符串</td></tr><tr><td><code>{n}</code></td><td>n 个匹配</td><td><code>[abc]{3}</code></td><td>长度为 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>{n,}</code></td><td>至少 n 个匹配</td><td><code>[abc]{3,}</code></td><td>长度不小于 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>{n,m}</code></td><td>n 到 m 个匹配</td><td><code>[abc]{3,5}</code></td><td>长度介于 3 到 5 之间的 abc 中的任意字符的组合</td></tr></tbody></table><ul><li><p>Java 的匹配模式默认是<mark>贪婪匹配</mark>。即：<code>aaaaa</code> 匹配 <code>a{3,5}</code> 的场合，会匹配到 <code>aaaaa</code></p><p><mark>希望实现非贪婪匹配，可以添加额外的 <code>?</code>。如：<code>*?</code>、<code>+?</code>、<code>??</code> 代表各自规则的非贪婪匹配</mark></p><p>注意，除非语句要求限定长度，否则语法都会尽量长的返回字符串</p></li></ul><h3 id="_25-1-5-定位符" tabindex="-1"><a class="header-anchor" href="#_25-1-5-定位符"><span><mark>25.1.5 定位符</mark></span></a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>^</code></td><td>指定起始字符</td><td><code>^[0-9]+[a-z]*</code></td><td>至少一个数字开头，后接任意小写字母字符串，如果是123abc12可以匹配到‘123abc’，如果是ab123abc则会匹配不到，因为开头必须为数字。结尾没有做要求。</td></tr><tr><td><code>$</code></td><td>指定结束字符</td><td><code>^[0-9][a]$</code></td><td>一个数字开头，一个 a 结尾,结尾也必须是a，否则匹配不到。</td></tr><tr><td><code>\\b</code></td><td>匹配目标字符串的边界</td><td><code>K\\.C\\b</code></td><td>匹配边界的 K.C</td></tr><tr><td><code>\\B</code></td><td>匹配目标字符串的非边界</td><td><code>K\\.C\\B</code></td><td>匹配非边界的 K.C</td></tr></tbody></table><ul><li>边界即字符串的末尾，或字符串中空格间隔的子串的末尾。</li><li>用的最多的是<code>^</code>和<code>$</code>，他们经常搭配使用。例如要限定一个邮箱格式，则写为<code>^ [a-zA-Z0-9_-]+@ [a-zA-Z0-9_-]+ (\\\\. [a-zA-Z0-9_-]+)+$</code></li></ul><h3 id="_25-1-6-分组" tabindex="-1"><a class="header-anchor" href="#_25-1-6-分组"><span>25.1.6 分组</span></a></h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>(pattern)</code></td><td>非命名捕获。捕获匹配的字符串。</td></tr><tr><td><code>(?&lt;name&gt;pattern)</code>、<code>(?&#39;name&#39;pattern)</code></td><td>命名捕获，给组取名，<mark>可以在group方法中传入这个命名的字符串</mark>来得到相应分组字符串。用于 name 的字符串不能包含标点符号，也不能以数字开头</td></tr></tbody></table><ul><li>编号为 0 的第一个捕获是由整个正则表达式匹配的文本。其他捕获结果根据左括号的顺序从 1 开始自动编号。</li></ul><h3 id="_25-1-7-非捕获分组" tabindex="-1"><a class="header-anchor" href="#_25-1-7-非捕获分组"><span><mark>25.1.7 非捕获分组</mark></span></a></h3><p>写法简洁，但是这样就不能gourp(1)和gourp(2)访问了。</p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>(?:pattern)</code></td><td>匹配 pattern <mark>但不捕获该匹配的子表达式</mark></td><td>\`industr(?:y</td><td>ies)\`</td></tr><tr><td><code>(?=pattern)</code></td><td>匹配处于 pattern 前的搜索字符串。非捕获分组。</td><td>\`Windows(?=7|10）</td><td>只得到windows 7或windows 10前的Windows</td></tr><tr><td><code>(?!pattern)</code></td><td>匹配不处于 pattern 前的搜索字符串。非捕获分组。</td><td>\`Windows(?!7|10）</td><td>得到除了windows7或windows10之前的windows</td></tr></tbody></table><h2 id="_25-2-常用类" tabindex="-1"><a class="header-anchor" href="#_25-2-常用类"><span>25.2 常用类</span></a></h2><ul><li><p><code>Pattern</code> 类：</p><p><code>Pattern</code> 对象是一个正则表达式对象，该类没有公共构造方法。</p><p>用 <code>Pattern.compile(reg)</code> 获取一个 <code>Pattern</code> 对象。</p></li><li><p><code>Matcher</code> 类：</p><p><code>Matcher</code> 对象是输入字符串进行解释和匹配的引擎，也没有公共构造方法。</p><p>用 <code>Pattern</code> 对象的 <code>matcher(content)</code> 方法获得一个 <code>Matcher</code> 对象。</p></li><li><p><code>PatternSyntaxExcption</code> 类：</p><p><code>PatternSyntaxExcption</code> 是一个非强制异常类，表示一个正则表达式中的语法错误。</p></li></ul><h3 id="_25-2-1-pattern-类常用方法" tabindex="-1"><a class="header-anchor" href="#_25-2-1-pattern-类常用方法"><span>25.2.1 <code>Pattern</code> 类常用方法</span></a></h3><ul><li><p><code>Pattern.matches(reg, content)</code>：==整体匹配，==输入的字符串是否符合表达式。返回布尔值。</p><p><code>matcher.matches()</code>：整体匹配，字符串是否符合表达式。返回布尔值。前面的方法实际上就是这个方法。</p></li><li><p><code>Pattern.compile(reg)</code>：返回一个指定表达式的 <code>Pattern</code> 对象</p></li><li><p><code>pattern.matcher(content)</code>：返回一个字串的 <code>Matcher</code> 对象</p></li><li><p><code>matcher.pattern()</code>：返回该 <code>Matcher</code> 对象的表达式</p><p><code>pattern.pattern()</code>：返回该 <code>Pattern</code> 对象的表达式</p></li><li><p><code>matcher.find()</code>：尝试查找下一个匹配的序列，返回布尔值</p><p><code>matcher.find(int)</code>：重置该匹配器，从指定索引位置开始重新查找</p></li><li><p><code>matcher.start()</code>：返回本次匹配的字符起始位置的索引</p><p><code>matcher.end()</code>：返回本次匹配的字符结束位置 + 1 的索引</p><p><mark>这个场合，<code>content.substring(matcher.start(), matcher.end())</code> 就是匹配的字符串</mark></p></li><li><p><code>matcher.start(int)</code>：返回本次匹配的字符的该组内容的起始位置的索引</p><p><code>matcher.end(int)</code>：返回本次匹配的字符的该组内容的结束位置 + 1 的索引</p></li><li><p><mark><code>matcher.replaceAll(str)</code>：替换匹配到的全部内容,返回替换的字符，原来的字符不变化，可以通过用原字符串引用接受这个返回值来变相”改变“内容（字符串是不可以修改的，只是原来的引用指向了新的字符串对象）</mark></p><p><code>matcher.replaceFirst(str)</code>：替换第一次匹配到的内容</p><p>这些场合，返回的字符串才是替换后的字符串。原字符串不变。</p></li></ul><h2 id="_25-3-分组、捕获、反向引用" tabindex="-1"><a class="header-anchor" href="#_25-3-分组、捕获、反向引用"><span>25.3 分组、捕获、<mark>反向引用</mark></span></a></h2><ul><li><p>分组（子表达式）</p></li><li><p>捕获：把正则表达式中，子表达式（分组）的内容保存到内存中以数字编号或显式命名的组里，方便后面引用。以分组的左括号为标志，第一组组号为 1，第二组为 2，以 0 代表整个正则表达式。</p></li><li><p>反向引用：分组的内容被捕获后，可以在这个括号后使用。这种引用既可以是在正则表达式内部，也可以在外部。内部反向引用 <code>\\分组号</code>、外部反向引用 <code>$分组号</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			//即，重复的字母或数字</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Matcher</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mathcer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//这样，就完成了去重</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//前五位数字-后面9为每三位数字相同。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">12345-111222333</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[0-9]{5}-(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1{2}(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2{2}(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3{2}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Pattern</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Matcher</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">group</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_25-4-在-string-中使用正则表达式" tabindex="-1"><a class="header-anchor" href="#_25-4-在-string-中使用正则表达式"><span><mark>25.4 在 <code>String</code> 中使用正则表达式</mark></span></a></h2><ul><li><code>str.matches(reg)</code>：<mark>整体匹配</mark></li><li><mark><code>str.replaceAll(reg, reg)</code>：替换匹配到的全部内容</mark></li><li><mark><code>str.split(reg)</code>：分割内容</mark></li></ul><h1 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例"><span>应用实例</span></a></h1><h2 id="_1-验证汉字" tabindex="-1"><a class="header-anchor" href="#_1-验证汉字"><span>1.验证汉字</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">你好</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">你hello好</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0391-</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ffe5]+$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//这个范围是汉字的范围</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Pattern</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Matcher</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">满足格式</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">不满足格式</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-验证url" tabindex="-1"><a class="header-anchor" href="#_2-验证url"><span>2.验证url</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^((https|http):</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/)([</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w-]+</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.)+([</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w-])+(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w.?%/&amp;=-]*)?$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-结巴程序去重" tabindex="-1"><a class="header-anchor" href="#_3-结巴程序去重"><span>3.结巴程序去重</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我....我要....学学学学....编程java!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[.]+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Pattern</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">regular</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Matcher</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pattern </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(.)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">matcher </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">group</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(.)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上可以用String来做，这样就可以去重了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(.)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,46)]))}const d=i(h,[["render",e],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/notes/Java/djc390sw/","title":"17 正则表达式","lang":"zh-CN","frontmatter":{"title":"17 正则表达式","createTime":"2024/09/01 23:18:29","permalink":"/notes/Java/djc390sw/"},"headers":[{"level":2,"title":"25.1 语法","slug":"_25-1-语法","link":"#_25-1-语法","children":[{"level":3,"title":"25.1.1 转义符号 \\\\","slug":"_25-1-1-转义符号","link":"#_25-1-1-转义符号","children":[]},{"level":3,"title":"25.1.2 字符匹配符","slug":"_25-1-2-字符匹配符","link":"#_25-1-2-字符匹配符","children":[]},{"level":3,"title":"25.1.3 选择匹配符 |","slug":"_25-1-3-选择匹配符","link":"#_25-1-3-选择匹配符","children":[]},{"level":3,"title":"25.1.4 限定符","slug":"_25-1-4-限定符","link":"#_25-1-4-限定符","children":[]},{"level":3,"title":"25.1.5 定位符","slug":"_25-1-5-定位符","link":"#_25-1-5-定位符","children":[]},{"level":3,"title":"25.1.6 分组","slug":"_25-1-6-分组","link":"#_25-1-6-分组","children":[]},{"level":3,"title":"25.1.7 非捕获分组","slug":"_25-1-7-非捕获分组","link":"#_25-1-7-非捕获分组","children":[]}]},{"level":2,"title":"25.2 常用类","slug":"_25-2-常用类","link":"#_25-2-常用类","children":[{"level":3,"title":"25.2.1 Pattern 类常用方法","slug":"_25-2-1-pattern-类常用方法","link":"#_25-2-1-pattern-类常用方法","children":[]}]},{"level":2,"title":"25.3 分组、捕获、反向引用","slug":"_25-3-分组、捕获、反向引用","link":"#_25-3-分组、捕获、反向引用","children":[]},{"level":2,"title":"25.4 在 String 中使用正则表达式","slug":"_25-4-在-string-中使用正则表达式","link":"#_25-4-在-string-中使用正则表达式","children":[]},{"level":2,"title":"1.验证汉字","slug":"_1-验证汉字","link":"#_1-验证汉字","children":[]},{"level":2,"title":"2.验证url","slug":"_2-验证url","link":"#_2-验证url","children":[]},{"level":2,"title":"3.结巴程序去重","slug":"_3-结巴程序去重","link":"#_3-结巴程序去重","children":[]}],"readingTime":{"minutes":8.55,"words":2565},"git":{"createdTime":1725207483000,"updatedTime":1727067719000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":2}]},"filePathRelative":"notes/Java/00-基础/17 正则表达式.md"}');export{d as comp,p as data};

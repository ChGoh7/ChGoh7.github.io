import{_ as i,c as e,b as a,o as n}from"./app-B2MnlW3b.js";const l={};function t(d,s){return n(),e("div",null,s[0]||(s[0]=[a(`<p>主要有顺序控制、分支控制、循环控制。</p><h2 id="顺序控制" tabindex="-1"><a class="header-anchor" href="#顺序控制"><span>顺序控制</span></a></h2><p>程序从上到下逐行执行，中间没有任何判断和跳转（默认的控制顺序）</p><p>比如：Java 定义变量时采用合法的前向引用。</p><p>语句：Java 中最小的执行单位。语句分为 单语句 和 复合语句。</p><ul><li><p>单语句：通常意义的一条语句。语句间以分号 <code>;</code> 分隔。</p></li><li><p>复合语句：一对大括号括起来的语句组。也称为 “块”</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    语句1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    语句2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块中可以有多条语句。块后没有分号 <code>;</code></p></li></ul><h2 id="分支控制-if-else" tabindex="-1"><a class="header-anchor" href="#分支控制-if-else"><span>分支控制 <code>if-else</code></span></a></h2><blockquote><p>让程序有选择的执行。主要分为：单分支控制、双分支控制</p></blockquote><h3 id="单分支控制" tabindex="-1"><a class="header-anchor" href="#单分支控制"><span>单分支控制</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (条件表达式) 语句;</span></span>
<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特别地，把代码块（复合语句）作为语句的场合也能这样写：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (条件表达式) {</span></span>
<span class="line"><span> 执行代码块;</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当条件表达式为 <code>ture</code>，就会执行 <code>{执行代码块;}</code>；如果为 <code>false</code> 则不执行。特别地：如果 <code>{执行代码块;}</code> 中只有一条代码，也可以不写 <code>{ }</code>（但还是建议写上）</p><h3 id="双分支控制" tabindex="-1"><a class="header-anchor" href="#双分支控制"><span>双分支控制</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (条件表达式) {</span></span>
<span class="line"><span> 执行代码块;</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span> 执行代码块2;</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当条件表达式为 <code>ture</code>，就会执行 <code>{执行代码块1;}</code>；如果为 <code>false</code> 则执行 <code>{执行代码块2;}</code>。</p><h3 id="多分支控制" tabindex="-1"><a class="header-anchor" href="#多分支控制"><span>多分支控制</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (条件表达式) {</span></span>
<span class="line"><span> 执行代码块;</span></span>
<span class="line"><span>} else if (条件表达式2) {</span></span>
<span class="line"><span> 执行代码块2;</span></span>
<span class="line"><span>} else if (条件表达式3) {</span></span>
<span class="line"><span> 执行代码块3;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>else {</span></span>
<span class="line"><span> 执行代码块n；</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别地：多分支可以没有 <code>else</code>。此时如果条件都不成立，则无执行入口</p><h3 id="嵌套分支" tabindex="-1"><a class="header-anchor" href="#嵌套分支"><span>嵌套分支</span></a></h3><blockquote><p>在一个分支结构中又完整嵌套了另一个完整的分支结构。里面的分支称为内层分支，外面的分支称为外层分支。</p></blockquote><p>Java 规定，else 子句属于逻辑上距其最近，且没有匹配 else 的 if 语句：</p><blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int n = 0;</span></span>
<span class="line"><span>if (n &gt; 0) n++;</span></span>
<span class="line"><span>if (n &gt; 1) n++;</span></span>
<span class="line"><span>else n--;			//属于上面这个 if 语句JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个场合，这个 else 语句属于上面的 <code>if (n &gt; 1)</code> 这个语句</p></blockquote><p>要想改变那个匹配关系，要使用 <code>{ }</code> 改变语句结构：</p><blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int n = 0;</span></span>
<span class="line"><span>if (n &gt; 0) {</span></span>
<span class="line"><span>    n++;</span></span>
<span class="line"><span>	if (n &gt; 1) n++;  </span></span>
<span class="line"><span>} else n--;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>规范：嵌套尽量不超过 3 层（可读性不好）</strong></p><h2 id="switch-分支结构" tabindex="-1"><a class="header-anchor" href="#switch-分支结构"><span><code>switch</code> 分支结构</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>switch(表达式){</span></span>
<span class="line"><span>	case 常量1:</span></span>
<span class="line"><span>		语句块1;</span></span>
<span class="line"><span>		break;			//break 语句可选</span></span>
<span class="line"><span>	case 常量2:</span></span>
<span class="line"><span>		语句块2;</span></span>
<span class="line"><span>		break;			//break 语句可选</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>	default:			//default 语句可选</span></span>
<span class="line"><span>		default语句块;</span></span>
<span class="line"><span>		break;			//break 语句可选</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>switch</code> 关键字，表示 switch 分支。</li><li><code>表达式</code> 对应一个值。<strong>该值必须是 int 或 char</strong>（char 可以转化为 int）。是 byte 或 short 的场合，要提升为 int。不允许 long、double 或 float</li><li><code>case 常量1;</code> 表示：当 <code>表达式</code> 的值等于 <code>常量1</code> ，则执行 <code>语句块1</code>。</li><li><code>break;</code> 表示退出 switch 分支。</li><li>当 <code>表达式</code> 的值匹配 <code>常量1</code> ，则执行 <code>语句块1</code>，如果不匹配，则继续匹配 <code>常量2</code> ，以此类推。</li><li>如果全都不匹配，则执行 <code>default</code>。</li><li>如果不写 <code>break;</code> ，则会发生<strong>穿透</strong>，即不进行判断而继续执行下一语句块。</li></ol><h3 id="使用细节" tabindex="-1"><a class="header-anchor" href="#使用细节"><span>使用细节</span></a></h3><ol><li><p><code>表达式;</code> 数据类型，应和 <code>case</code> 后的 <code>常量</code> 类型一致，或者是可以自动转换成可以比较的类型。如：输入的是 <code>char</code> 而 <code>常量</code> 是 <code>int</code></p></li><li><p>switch 中 <code>表达式</code> 的返回值必须是：<code>byte</code> <code>short</code> <code>int</code> <code>char \`\`enum</code> <code>String</code></p><p><em><strong>——<code>enum</code> 是什么？详见 [[10.1 枚举 ]](https://i-melody.github.io/2021/12/17/Java/入门阶段/10 枚举和注解/#10-1-枚举)</strong></em></p></li><li><p><code>case</code> 语句中的值必须是 常量 或 常量表达式，不能是 变量。</p></li><li><p><code>default</code> 是可选的。没有就不执行。</p></li><li><p><code>break;</code> 用来跳出 switch 分支。如果不写，会持续执行语句，直到分支结束或遇到下一个 <code>break;</code></p></li></ol><h3 id="_4-3-2-与-if-else-分支结构的取舍" tabindex="-1"><a class="header-anchor" href="#_4-3-2-与-if-else-分支结构的取舍"><span>4.3.2 与 <code>if-else</code> 分支结构的取舍</span></a></h3><ul><li>如果判断的具体数值不多，且符合 <em><strong>[[4.3.1.1]](https://i-melody.github.io/2021/11/24/Java/入门阶段/4 程序控制结构/#4-3-1-使用细节)</strong></em> ，推荐使用 switch。</li><li>对区间判断的场合，对结果为 boolean 类型的判断，使用 <code>if-else</code>。</li></ul><h2 id="for-循环控制" tabindex="-1"><a class="header-anchor" href="#for-循环控制"><span><code>for</code> 循环控制</span></a></h2><blockquote><p>让代码可以循环执行。</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>for(循环变量初始化;循环条件;循环变量迭代){</span></span>
<span class="line"><span>循环操作（代码块）;</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>for</code> 关键字，表示循环控制</li><li>四个要素：1. 循环变量初始化 2. 循环的条件 3. 循环的操作 4. 循环变量迭代</li></ul><p>所有循环开始前仅一次进行初始化。直到循环条件变为 false 前，执行循环操作。每轮循环结束后，进行循环变量迭代。</p><ul><li>循环操作可以有多条语句</li><li>如果循环操作只有一条语句，可以省略 <code>&quot; &quot;</code>，但建议不省略</li></ul><h3 id="使用细节-1" tabindex="-1"><a class="header-anchor" href="#使用细节-1"><span>使用细节</span></a></h3><ol><li><p>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</p><p>循环条件可以为空。这个场合，默认为真（true）</p></li><li><p><code>for(;循环条件;){ }</code> 其中的初始化和变量迭代可以写在别处，但 <code>;</code> 不能省略。如果不写在别处，那个 <code>循环变量初始化</code> 中声明的变量只能在该 for 循环中使用。</p></li><li><p>控制台用 ctrl + c 强制结束一个流程</p></li><li><p>循环初始值可以有多条初始化语句，但要求类型一样，并用 <code>,</code> 隔开。</p><p>变量迭代也可以有多条代码，用 <code>,</code> 隔开。</p></li></ol><h3 id="for-each-泛型-for-循环" tabindex="-1"><a class="header-anchor" href="#for-each-泛型-for-循环"><span>for each（泛型 for 循环）</span></a></h3><blockquote><p>泛型 for 循环（增强 for 循环）能用来依次处理数组（或其他元素集合）中的每个元素，而不必考虑下标值</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>for(int i : nums){						//其中 nums 是一个一维 int 数组</span></span>
<span class="line"><span>	System.out.println(i);</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述写法（增强 <code>for</code> 写法）类似于以下写法</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>for(int i = 0; i &lt; nums.length; i++){</span></span>
<span class="line"><span>	System.out.println(nums[i]);</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型 for 循环适用于数组或一个实现了 Iterable 接口的对象。泛型 for 循环的本质是一个 Iterator（迭代器）</p><p><em><strong>—— 迭代器，见 [[13.2.2.1 用 Iterator 遍历元素]](https://i-melody.github.io/2021/12/22/Java/入门阶段/13 集合/#13-2-2-2-用-enhanced-for-遍历元素)</strong></em></p><h2 id="while-循环控制" tabindex="-1"><a class="header-anchor" href="#while-循环控制"><span><code>while</code> 循环控制</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>while(循环条件){</span></span>
<span class="line"><span> 循环体(代码块);</span></span>
<span class="line"><span> 循环变量迭代;</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>while</code> 也有四要素，只是位置和 <code>for</code> 不同</p><h3 id="使用细节-2" tabindex="-1"><a class="header-anchor" href="#使用细节-2"><span>使用细节</span></a></h3><ol><li><p>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</p><p>while 循环中，循环条件不能为空。</p></li><li><p><code>while</code> 循环是先判断再执行语句。</p></li></ol><h2 id="do-while-循环控制" tabindex="-1"><a class="header-anchor" href="#do-while-循环控制"><span><code>do..while</code> 循环控制</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>do{</span></span>
<span class="line"><span>循环体;</span></span>
<span class="line"><span>循环变量迭代;</span></span>
<span class="line"><span>}while(循环条件);JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>do</code> <code>while</code> 是关键字</li><li>也有四要素，位置不同</li><li>先执行，再判断。也就是说，一定会至少执行一次</li><li><strong>最后有一个 <code>;</code></strong></li><li><code>while</code> 与 <code>do..while</code> 区别：“要账”</li></ol><h3 id="使用细节-3" tabindex="-1"><a class="header-anchor" href="#使用细节-3"><span>使用细节</span></a></h3><ol><li>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</li><li><code>do..while</code> 循环是先执行再判断的语句。因此至少执行一次。</li></ol><h2 id="多重循环控制" tabindex="-1"><a class="header-anchor" href="#多重循环控制"><span>多重循环控制</span></a></h2><p>将一个循环放在另一个循环体内，就形成了嵌套循环。建议一般使用两层，最多不超过三层。</p><p>嵌套循环 是把 内层循环 当成 外层循环 的 循环体。只有内层 <code>false</code> 时才可能结束当层循环。</p><p>若内层执行 n 次，外层 m 次，则合计会循环 n*m 次</p><p>以下是一个示例（乘法口诀）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Code4_7</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">          int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//声明第一个乘数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      		int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//声明第二个乘数</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">           do</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               //直到 a &gt; b 为止，a 不断增长，并让两数相乘，输出公式</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          do</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                   System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> * </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">               }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               //把 a 重置为 1，让 b 增长，然后循环</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           a </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">           System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           b</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-8-跳转控制语句" tabindex="-1"><a class="header-anchor" href="#_4-8-跳转控制语句"><span>4.8 跳转控制语句</span></a></h2><blockquote><p>跳转控制语句用于分支或循环中，以便程序员更好控制程序执行方向</p></blockquote><h3 id="_4-8-1-标签" tabindex="-1"><a class="header-anchor" href="#_4-8-1-标签"><span>4.8.1 标签</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">	{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">		{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   ...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">		 berak b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">		}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>a:</code> <code>b:</code> <code>c:</code> 是标签，名字由程序员指定</li><li><code>break</code> 后指定哪个标签就退出到哪里</li><li><strong>实际开发中，尽量不要使用标签</strong></li></ol><h3 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span>break</span></a></h3><blockquote><p>用于中止一个语句块的执行</p></blockquote><p>语法：<code>break;</code></p><p>break 可以被用在三种场合中</p><ul><li><p>switch 语句中，以跳出判断（结束穿透）</p></li><li><p>for、while、do…while 循环语句中，以跳出循环</p></li><li><p>语句块中，以跳过本块中所有剩余语句</p><p><code>break</code> 语句出现在多层嵌套的语句块中时，可以通过 <strong>标签</strong> 指明要终止的时哪一层语句块。</p></li></ul><h3 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span>continue</span></a></h3><blockquote><p>在循环中出现。用于结束本次循环，继续下一次循环</p></blockquote><p>语法：<code>continue;</code></p><p>进行下次循环前，仍会判断循环条件是否满足</p><p>在多层嵌套循环中，可以通过标签指出跳出哪次循环（同 <code>break</code>）</p><h3 id="return" tabindex="-1"><a class="header-anchor" href="#return"><span>return</span></a></h3><blockquote><p>用于方法。表示跳出所在的方法</p></blockquote><p>语法：<code>return;</code></p><p>方法有返回值的场合，将返回值写在 return 后：<code>return 值;</code></p><p>如果写在 主方法 则跳出程序</p>`,84)]))}const c=i(l,[["render",t],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/notes/Java/uqiejtfg/","title":"04 程序控制结构","lang":"zh-CN","frontmatter":{"title":"04 程序控制结构","createTime":"2024/09/03 00:35:33","permalink":"/notes/Java/uqiejtfg/"},"headers":[{"level":2,"title":"顺序控制","slug":"顺序控制","link":"#顺序控制","children":[]},{"level":2,"title":"分支控制 if-else","slug":"分支控制-if-else","link":"#分支控制-if-else","children":[{"level":3,"title":"单分支控制","slug":"单分支控制","link":"#单分支控制","children":[]},{"level":3,"title":"双分支控制","slug":"双分支控制","link":"#双分支控制","children":[]},{"level":3,"title":"多分支控制","slug":"多分支控制","link":"#多分支控制","children":[]},{"level":3,"title":"嵌套分支","slug":"嵌套分支","link":"#嵌套分支","children":[]}]},{"level":2,"title":"switch 分支结构","slug":"switch-分支结构","link":"#switch-分支结构","children":[{"level":3,"title":"使用细节","slug":"使用细节","link":"#使用细节","children":[]},{"level":3,"title":"4.3.2 与 if-else 分支结构的取舍","slug":"_4-3-2-与-if-else-分支结构的取舍","link":"#_4-3-2-与-if-else-分支结构的取舍","children":[]}]},{"level":2,"title":"for 循环控制","slug":"for-循环控制","link":"#for-循环控制","children":[{"level":3,"title":"使用细节","slug":"使用细节-1","link":"#使用细节-1","children":[]},{"level":3,"title":"for each（泛型 for 循环）","slug":"for-each-泛型-for-循环","link":"#for-each-泛型-for-循环","children":[]}]},{"level":2,"title":"while 循环控制","slug":"while-循环控制","link":"#while-循环控制","children":[{"level":3,"title":"使用细节","slug":"使用细节-2","link":"#使用细节-2","children":[]}]},{"level":2,"title":"do..while 循环控制","slug":"do-while-循环控制","link":"#do-while-循环控制","children":[{"level":3,"title":"使用细节","slug":"使用细节-3","link":"#使用细节-3","children":[]}]},{"level":2,"title":"多重循环控制","slug":"多重循环控制","link":"#多重循环控制","children":[]},{"level":2,"title":"4.8 跳转控制语句","slug":"_4-8-跳转控制语句","link":"#_4-8-跳转控制语句","children":[{"level":3,"title":"4.8.1 标签","slug":"_4-8-1-标签","link":"#_4-8-1-标签","children":[]},{"level":3,"title":"break","slug":"break","link":"#break","children":[]},{"level":3,"title":"continue","slug":"continue","link":"#continue","children":[]},{"level":3,"title":"return","slug":"return","link":"#return","children":[]}]}],"readingTime":{"minutes":7.51,"words":2253},"git":{"createdTime":1725295233000,"updatedTime":1727067719000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":2}]},"filePathRelative":"notes/Java/00-基础/04 程序控制结构.md"}');export{c as comp,h as data};

import{_ as n,c as a,b as e,o as i}from"./app-DZW6oR8T.js";const t={};function l(p,s){return i(),a("div",null,s[0]||(s[0]=[e(`<blockquote><p>数组：可以存放多个同一类型的数据。数组也是一种数据，是引用类型。</p><p>即：数组就是一组数据。</p></blockquote><h2 id="_5-1-一维数组" tabindex="-1"><a class="header-anchor" href="#_5-1-一维数组"><span>5.1 一维数组</span></a></h2><blockquote><p>数组可以是多个相同类型数据的组合，实现对这些数据的统一管理。</p><p>数组中的元素可以是任何数据类型。包括基本类型和引用类型。</p><p>数组的下标从 0 开始。且必须在指定范围内使用，否则报错。</p><p>数组属于 引用类型，数组型数据是 对象（Object）</p><p>数组创建后，如果没有赋值，有默认值：int（0），short（0），byte（0），long（0L），float（0.0F），double（0.0），char（\\u0000），boolean（false），String（null），Object（null）</p></blockquote><p><strong>数组的构造方法：</strong></p><p>使用数组的步骤：1.声明数组并开辟空间 2.给数组各个元素赋值 3.使用数组</p><ul><li><p>构造方式1：动态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[] ints = new int[5];				// 创建了数组 name，存放5个int</span></span>
<span class="line"><span>int ints2[] = new int[1];				// 这种写法也行</span></span>
<span class="line"><span>ints[2] = 15;							// 访问数组第3个数JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方式2：动态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char[] chars;							// 先声明数组 name，此时数组是 null</span></span>
<span class="line"><span>chars = new char[2];					// 分配内存空间，可以存放数据了</span></span>
<span class="line"><span>chars[1] = &#39;\\t&#39;;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方式3：静态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>boolean[] bools = {true, false, true, false};</span></span>
<span class="line"><span>String[] strs = new String[]{&quot;阿伟，你又在打电动噢&quot;, &quot;烦啦&quot;};JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>确切知道数组每个元素的场合可以用这个方法。</p></li></ul><p><strong>数组的使用方法：</strong></p><ul><li><p>访问数组元素：<code>数组名[元素下标]</code></p><p>其中，元素下标从 0 开始编号。如：访问 strs 数组的第一个元素 <code>strs[0]</code></p></li><li><p>数组长度：<code>数组名.length</code></p><p>是一个 int 值。不能通过试图改变该值来改变数组容量</p></li></ul><h3 id="_5-1-1-数组赋值机制" tabindex="-1"><a class="header-anchor" href="#_5-1-1-数组赋值机制"><span>5.1.1 数组赋值机制</span></a></h3><ol><li><p>基本数据类型赋值，赋值方式是值拷贝。这个值就是具体的数据，且互不影响</p></li><li><p>数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传达。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[] array1 = {0, 0, 0};</span></span>
<span class="line"><span>int[] array2 = array1;</span></span>
<span class="line"><span>array2[0] = 100;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述情况下，<code>array1[0]</code> 也会变成 <code>100</code>。因为数组在 JVM 的 栈 里是一个地址，指向 堆 里的一个空间。这两个数组在上述情况下指向同一空间。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[] array1 = {0, 0, 0};</span></span>
<span class="line"><span>int[] array2 = new int[array1.length];</span></span>
<span class="line"><span>for (int i = 0;i &lt; array1.length;i++) {</span></span>
<span class="line"><span>    array2[i] = array1[i];</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方式拷贝后，两数组相互独立。</p></li></ol><h3 id="_5-1-2-数组的扩容" tabindex="-1"><a class="header-anchor" href="#_5-1-2-数组的扩容"><span>5.1.2 数组的扩容</span></a></h3><p>当数组达到上限时，创建一个容量更大的新数组。将旧数组的元素依次放入，之后替换旧数组。</p><p>以下是一个扩容方法：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import java.util.Scanner;</span></span>
<span class="line"><span>public class Code5_1_3{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	public static void main(String[] args){</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		Scanner inP = new Scanner(System.in);</span></span>
<span class="line"><span>		int[] arr1 = {1, 2, 3};		// 这是原数组</span></span>
<span class="line"><span>		int add = 0;				// 这个变量记录输入的新元素的值</span></span>
<span class="line"><span>		int count = arr1.length;	// 这个变量是新数组的长度</span></span>
<span class="line"><span>		char yN = &#39;a&#39;;				// 记录询问继续与否时用户的输入字符</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		do{</span></span>
<span class="line"><span>       	/* 创建多一位的新数组，把新元素赋给新数组的最后一位 */</span></span>
<span class="line"><span>				System.out.println(&quot;请输入添加数字：&quot;);</span></span>
<span class="line"><span>				add = inP.nextInt();</span></span>
<span class="line"><span>				int[] tem = new int[arr1.length + 1];</span></span>
<span class="line"><span>				tem[count] = add;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       	/* 把旧数组的值全部赋给新数组 */</span></span>
<span class="line"><span>				for(int i = 0; i &lt; arr1.length; i++){</span></span>
<span class="line"><span>					tem[i] = arr1[i];</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       	/* 把新数组保存下来，输出现在的数组 */</span></span>
<span class="line"><span>				arr1 = tem;</span></span>
<span class="line"><span>				count++;</span></span>
<span class="line"><span>				System.out.println(&quot;\\n\\n当前数组为：&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>				for(int i = 0; i &lt; arr1.length; i++){</span></span>
<span class="line"><span>					System.out.print(arr1[i] + &quot; &quot;);</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       	/* 询问是否继续添加，输入n跳出，否则循环 */</span></span>
<span class="line"><span>				System.out.println(&quot;\\n\\n是否继续添加？（Y/N）&quot;);</span></span>
<span class="line"><span>				yN = inP.next().charAt(0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		}while(yN != &#39;N&#39; &amp;&amp; yN != &#39;n&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-二维数组" tabindex="-1"><a class="header-anchor" href="#_5-2-二维数组"><span>5.2 二维数组</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[][] ints;					// 声明一个二维数组</span></span>
<span class="line"><span>int[] ints2[];					// 也能这样声明</span></span>
<span class="line"><span>int ints3[][];					// 这样也行</span></span>
<span class="line"><span>int[] x,y[];					// 声明了两个数组，一个是 int[] x 一个是 int[][] y</span></span>
<span class="line"><span>								// 把 int[] 视作一个类型，就能很好地理解这个写法JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二维数组实际是由多个一维数组组成的，它的各个元素的长度可以相同，也可以不同。</p><p>数组是一个对象，所以二维数组的元素存放的是一维数组的地址。</p><p><strong>二维数组构造方法：</strong></p><ul><li><p>构造方法1：动态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[][] many_ints = new int[3][4]	// 创建 有3个 包含4个元素的一维数组 的二维数组</span></span>
<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法2：动态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>double[][] many_doubles;			// 先声明变量</span></span>
<span class="line"><span>many_doubles = new double[3][4];	// 再开辟空间JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法3：动态初始化-列数不确定</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char[][] many_chars = new char[3][];	// 创建一个三行列数不确定的二维数组</span></span>
<span class="line"><span>for (int i = 0; i &lt; 3; i++) {</span></span>
<span class="line"><span>    many_chars[i] = new char[i + 1];	// 此时，每个数组空间依次增大</span></span>
<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法4：静态初始化</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int[][] many_many = {{1, 3}, {4, 10, 2}, {95}};</span></span>
<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>二维数组使用方法：</strong></p><ul><li><code>ints.length</code>：该二维数组的长度，这里是 3</li><li><code>ints[0]</code>：该二维数组的第一个子数组</li><li><code>ints[0].length</code>：该二维数组的第一个子数组的长度，这里是 4</li><li><code>ints[1][0]</code>：该二维数组第二个子数组的第一个元素的值，这里是 21</li></ul><p><s>这是一维数组：int[] a、这是二维数组：int[][] b。好了，现在来写一个堆排序吧</s></p>`,23)]))}const c=n(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/notes/Java/xcwa46tq/","title":"5 数组","lang":"zh-CN","frontmatter":{"title":"5 数组","createTime":"2024/09/01 23:18:29","permalink":"/notes/Java/xcwa46tq/"},"headers":[],"readingTime":{"minutes":4.38,"words":1313},"git":{"updatedTime":1727067719000,"contributors":[{"name":"chgoh7","username":"chgoh7","email":"3180349973@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/chgoh7?v=4","url":"https://github.com/chgoh7"}]},"filePathRelative":"notes/Java/00-基础/05 数组.md","bulletin":false}');export{c as comp,r as data};

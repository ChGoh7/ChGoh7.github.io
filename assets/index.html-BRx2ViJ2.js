import{_ as i,c as a,b as e,o as l}from"./app-DpXChuZj.js";const t={};function n(p,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="整合-web" tabindex="-1"><a class="header-anchor" href="#整合-web"><span>整合 Web</span></a></h2><h3 id="web开发-静态资源访问" tabindex="-1"><a class="header-anchor" href="#web开发-静态资源访问"><span>web开发-静态资源访问</span></a></h3><p>在线文档：https://docs.spring.io/spring-boot/reference/features/external-config.html</p><ol><li><p>只要静态资源放在/static、/public、/resources、/META-INF/resources可以被直接访问——对应文件WebProperties.java,会读取这个配置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> CLASSPATH_RESOURCE_LOCATIONS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">classpath:/META-INF/resources/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">				&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">classpath:/resources/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">classpath:/static/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">classpath:/public/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>常见静态资源；JS、CSS、图片(.jpg .png .gif .bmp .svg)、字体文件(Fonts)等</p></li><li><p>访问方式：默认：项目根路径/+静态资源名比如http://localhost:8080/hi.html. —— 在设置 WebMvcProperties.java 中属性为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> staticPathPattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/**</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h4 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h4><p>创建SpringBoot项目springbootweb</p><p>E:\\ProjectCollection\\FrameworkProject\\hatida-springboot\\springbootweb</p><h4 id="注意事项和细节" tabindex="-1"><a class="header-anchor" href="#注意事项和细节"><span>注意事项和细节</span></a></h4><ol><li>静态资源访问原理：静态映射是/**，也就是对所有清求拦截，请求进来，先看Controller能不能处理，不能处理的请求交给静态资源处理器，如果静态资源找不到则响应404页面</li><li>改变静态资源访问前缀，比如我们希望http://localhost:8080/hspres/*去请求静态资源，应用场景： 静态资源访问前缀和控制器请求路径冲突</li></ol><p>（1）创建application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> mvc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  static-path-pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /hatidares/**</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）重启应用，完成测试，浏览器输入：http://localhost:8080/hatidares/1.jpg</p><ol start="3"><li>改变默认的静态资源路径，比如希望在类路径下增加hatidaimg目录作为静态资源路径，并完成测试</li></ol><h3 id="rest风格请求处理" tabindex="-1"><a class="header-anchor" href="#rest风格请求处理"><span>Rest风格请求处理</span></a></h3><blockquote><p>SpringMVC讲过</p></blockquote><ol><li><p>Rest风格支持(HTTP请求方式动词来表示对资源的操作)</p></li><li><p>举例说明：</p></li></ol><ul><li>请求方式：/monster</li><li>GET-获取</li><li>DELETE-删除</li><li>PUT-修改</li><li>POST-保存</li></ul><h4 id="注意事项和细节-1" tabindex="-1"><a class="header-anchor" href="#注意事项和细节-1"><span>注意事项和细节</span></a></h4><ol><li><p>客户端时PostMan可以直接发送Put、delete等方式的请求，可以不设置Filter</p></li><li><p>如果要SpringBoot支持页面表单的Rest功能，则需要注意以下细节：</p><ol><li><p>Rest风格请求核心Filter：HiddenHttpMethodFilter，表单请求会被HiddenHttpMethodFilter拦截，获取到表单_method的值，再判断是PUT/DELETE/PATCH（PATCH是新引入的，是对PUT方法的补充，用来对已知资源进行局部更新：https://segmentfault.com/q/1010000005685904）</p></li><li><p>如果要SpringBoot支持页面表单的Rest功能，需要在application.yml启用filter功能，否则无效</p></li><li><p>修改application.yml启用filter功能</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#注意放在文件前面，否则不生效</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  mvc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    static-path-pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /hatidares/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #/** 改为 /hatidares/，放在前面**</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    hiddenmethod</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      filter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        enabled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	#开启基于页面表单的Rest功能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><p>为什么return “GET-查询妖怪”，返回的是字符串，而不是转发到对应的资源文件？</p><p>@RestController包含@ResponseBody注解，springboot底层(springmvc)，在处理return xxx的时候对该注解解析处理，即返回字符串xxx，而不会使用视图解析器来处理，如果把@RestController改为@Controller,当访问getMonster()时，如果你有xxx.html就会转发到xxx.html，报404</p><blockquote><p>测试时将xxx.html文件放在public\\xxx.html进行测试，并在application.yml配置视图解析器</p></blockquote><h3 id="接收参数注解" tabindex="-1"><a class="header-anchor" href="#接收参数注解"><span><mark>接收参数注解</mark></span></a></h3><ol><li>SpringBoot接收客户端提交数据/参数时会使用到相关注解</li><li>详解@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@CookieValue、@RequestBody</li></ol><h4 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例"><span>应用实例</span></a></h4><p>需求：演示各种方式提交数据/参数给服务器，服务器如何使用注解接收</p><ol><li>创建springbootweb\\src\\main\\resources\\public\\index.html</li></ol><h4 id="复杂参数" tabindex="-1"><a class="header-anchor" href="#复杂参数"><span>复杂参数</span></a></h4><ol><li><p>在开发中，SpringBoot在响应客户端请求时，也支持复杂参数</p></li><li><p><mark>Map、Model</mark>、Errors/BindingResult、RedirectAttributes、ServletResponse、SessionStatus,UriComponentsBuilder,ServletUriComponentsBuilder,HttpSession</p></li><li><p>Map、Model数据会被放在request域，到时Debug</p></li><li><p>RedirectAttributes重定向携带数据</p></li></ol><h5 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h5><p>在RequestController.java编写相关方法</p><h3 id="自定义对象参数-自动封装" tabindex="-1"><a class="header-anchor" href="#自定义对象参数-自动封装"><span>自定义对象参数-自动封装</span></a></h3><ol><li>在开发中，SpringBoot在响应客户端/浏览器请求时，也支持自定义对象参数</li><li>完成自动类型转换与格式化</li><li>支持级联封装</li></ol><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">				//封装该对象的属性时，对car对象的属性也进行封装，就叫级联封装</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Car</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">		</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> car_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> price</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const r=i(t,[["render",n],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/notes/Frameworks/edkxo606/","title":"集成web","lang":"zh-CN","frontmatter":{"title":"集成web","createTime":"2024/10/12 11:32:29","permalink":"/notes/Frameworks/edkxo606/"},"headers":[{"level":2,"title":"整合 Web","slug":"整合-web","link":"#整合-web","children":[{"level":3,"title":"web开发-静态资源访问","slug":"web开发-静态资源访问","link":"#web开发-静态资源访问","children":[]},{"level":3,"title":"Rest风格请求处理","slug":"rest风格请求处理","link":"#rest风格请求处理","children":[]},{"level":3,"title":"接收参数注解","slug":"接收参数注解","link":"#接收参数注解","children":[]},{"level":3,"title":"自定义对象参数-自动封装","slug":"自定义对象参数-自动封装","link":"#自定义对象参数-自动封装","children":[]}]}],"readingTime":{"minutes":3.28,"words":984},"git":{"createdTime":1728704198000,"updatedTime":1728836025000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":2}]},"filePathRelative":"notes/Frameworks/Spring系列/集成/集成web.md"}');export{r as comp,k as data};

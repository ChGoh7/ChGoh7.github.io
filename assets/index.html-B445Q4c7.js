import{_ as i,c as s,o as a,b as n}from"./app-CBVB9Cy0.js";const t={},e=n(`<ul><li>从 Java 5 开始出现</li><li>Annotaticm 能被用来为程序元素（ 类、方法、成员变量等）设置元数据</li><li>所有注解都隐式继承了 Annotation java.lang.annotation.Annotation 接口</li></ul><h2 id="基本-annotation" tabindex="-1"><a class="header-anchor" href="#基本-annotation"><span>基本 Annotation</span></a></h2><ul><li>在 java.lang 包下</li><li><code>@Override</code> 限定重写父类方法</li><li><code>@Deprecated</code> 标示已过时（与文档注释中的 @deprecated 标记的作用基本相同）</li><li><code>@SuppressWarnings(&quot;变量值&quot;)</code> 抑制编译器警告（常见的变量值：unused, rawtypes, unchecked, serial, deprecation, all）</li><li><code>@SafeVarargs</code> 抑制编译器“堆污染”警告（Java 7 新增）</li><li><code>@FunctionalInterface</code> 函数式接口（接口中只有一个抽象方法）（Java 8 新增）</li></ul><h2 id="jdk-的元-annotation" tabindex="-1"><a class="header-anchor" href="#jdk-的元-annotation"><span>JDK 的元 Annotation</span></a></h2><ul><li>在 java.lang.annotation 包下，用于修饰其它的 Annotation 定义</li><li><code>@Target</code>：用于指定被修饰的注解能用于修饰哪些程序元素常量值封装在 ElementType 枚举类中：TYPE、FIELD、CONSTRUCTOR、METHOD、LOCAL_VARIABLE、PACKAGE、PARAMETER、ANNOTATION_TYPE</li><li><code>@Retention</code>：用于指定被修饰的注解可以保留多长时间常量值封装在 RetentionPolicy 枚举类中：SOURCE、CLASS（默认值）、RUNTIME</li><li><code>@Documented</code>：其修饰的注解会保存到 API 文档中</li><li><code>@Inherited</code>：其修饰的注解可以被子类所继承</li></ul><h2 id="自定义-annotation" tabindex="-1"><a class="header-anchor" href="#自定义-annotation"><span>自定义 Annotation</span></a></h2><ul><li>Annotation 中的属性以<strong>无参数的抽象方法</strong>的形式来定义</li><li>属性的类型只能是基本类型、String、Class、annotation、枚举及这些类型一维数组</li><li>在定义 Annotation 的属性时可以使用 <code>default</code> 为其指定默认值</li><li>使用带属性的注解时，必须为该注解的所有没有默认值的属性指定值</li><li>对于 Annotation 中<strong>变量名为 value</strong>属性，在使用该注解时可以直接在该注解后的括号里指定 value 属性的值，无须使用“value = 变量值”的形式</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> MyTag1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">MyTag1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">xx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> MyTag2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 使用 default 为两个成员变量指定初始值</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">admin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 17</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">MyTag2</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 获取程序元素上的注解 @MyTag2 的成员变量的值</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">程序元素</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getAnnotation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MyTag2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">成员变量名</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过反射获取程序元素的-annotation-信息" tabindex="-1"><a class="header-anchor" href="#通过反射获取程序元素的-annotation-信息"><span>通过反射获取程序元素的 Annotation 信息</span></a></h2><ul><li>只能提取使用了 <code>@Retention(RetentionPolicy.RUNTIME)</code> 修饰的注解</li><li>AnnotatedElement 接口是<strong>所有程序元素</strong>（Class、Constructor、Field、Method、Package ） 的父接口</li><li>AnnotatedElement 接口中的方法<code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code>：判断该程序元素上是否存在指定类型的注解<code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass)</code>：返回该程序元素上存在的、指定类型的注解，如果不存在，则返回 null（包括继承的注释）<code>Annotation[] getAnnotations()</code>：返回该程序元素上存在的所有注解（包括继承的注释）<code>Annotation[] getDeclaredAnnotations ()</code>：返回直接修饰该程序元素的所有 Annotation</li></ul><h2 id="编译时处理-annotation" tabindex="-1"><a class="header-anchor" href="#编译时处理-annotation"><span>编译时处理 Annotation</span></a></h2><ul><li>注解处理工具 APT（Annotation Processing Tool）</li></ul>`,12),l=[e];function h(o,d){return a(),s("div",null,l)}const p=i(t,[["render",h],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/notes/JavaSE/zgyl249w/","title":"注解","lang":"zh-CN","frontmatter":{"title":"注解","createTime":"2024/08/26 15:22:10","permalink":"/notes/JavaSE/zgyl249w/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"基本 Annotation","slug":"基本-annotation","link":"#基本-annotation","children":[]},{"level":2,"title":"JDK 的元 Annotation","slug":"jdk-的元-annotation","link":"#jdk-的元-annotation","children":[]},{"level":2,"title":"自定义 Annotation","slug":"自定义-annotation","link":"#自定义-annotation","children":[]},{"level":2,"title":"通过反射获取程序元素的 Annotation 信息","slug":"通过反射获取程序元素的-annotation-信息","link":"#通过反射获取程序元素的-annotation-信息","children":[]},{"level":2,"title":"编译时处理 Annotation","slug":"编译时处理-annotation","link":"#编译时处理-annotation","children":[]}],"readingTime":{"minutes":2.27,"words":681},"git":{"createdTime":1724666056000,"updatedTime":1724666056000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":1}]},"filePathRelative":"notes/JavaSE/09 注解/注解.md"}`);export{p as comp,r as data};

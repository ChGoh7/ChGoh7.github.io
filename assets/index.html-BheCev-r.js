import{_ as e,c as i,o as l,b as s}from"./app-DKrwuLnz.js";const a={},t=s('<h1 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构"><span>顺序结构</span></a></h1><h1 id="选择结构" tabindex="-1"><a class="header-anchor" href="#选择结构"><span>选择结构</span></a></h1><ul><li>选择结构：根据条件来选择性地执行某段代码</li></ul><h2 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>if 语句</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (boolean 表达式 或 boolean 变量) {    条件执行体 // 为 true 时执行}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/if%E8%AF%AD%E5%8F%A5.png" target="_blank" rel="noopener noreferrer">![if语句](03 流程控制.assets/d40c2ac323898af12b283d9089e9b4e3.png)</a> 图 1 if语句</p><ul><li>if (boolean 表达式) 后没有 <code>;</code></li></ul><h2 id="if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-语句"><span>if-else 语句</span></a></h2><ul><li>语法结构</li><li>else 的隐含条件是对前面条件取反</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (boolean 表达式 或 boolean 变量) {    条件执行体 1 // 为 true 时执行 } else {    条件执行体 2 // 为 false 时执行}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/if-else%E8%AF%AD%E5%8F%A5.png" target="_blank" rel="noopener noreferrer">![if-else语句](03 流程控制.assets/3ce30cf6c955455717ca6bab8688d996.png)</a> 图 2 if-else语句</p><ul><li>if-else 语句和三元运算符：从语义上二者的含义相同；从本质上说，if-else 是语句结构，三元运算符是一种运算符号，三元运算符运算结束后会<strong>得到一个结果</strong>，而 if-else，不能返回什么结果，只能控制<strong>语句</strong>的执行流程。</li><li>不能直接使用 else 语句.</li></ul><h2 id="if-else-if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-if-else-语句"><span>if-else if-else 语句</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (boolean 表达式 A) {    条件执行体 1 // A为 true 时执行 } else if (boolean 表达式 B) {    条件执行体 2 // B为 true 时执行} else {    条件执行体 3 // 为 false 时执行}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/if-elseif-else%E8%AF%AD%E5%8F%A5.png" target="_blank" rel="noopener noreferrer">![if-elseif-else语句](03 流程控制.assets/f817da7014998a78210b241979321060.png)</a> 图 3 if-elseif-else语句</p><ul><li>不能单独使用 else if</li><li>可以不需要 else，至少一个 else if</li></ul><h2 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句"><span>switch 语句</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>switch (整型表达式) {    case 值 1:        执行语句 1;        break; // 注意是否要写 break    case 值 2:        执行语句 2;        break;    ...    case 值 n:        执行语句 n;    break;    default:        以上值都不匹配时执行的语句; // 不用写 break}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/if-elseif-else%E8%AF%AD%E5%8F%A5.png" target="_blank" rel="noopener noreferrer">![if-elseif-else语句](03 流程控制.assets/f817da7014998a78210b241979321060.png)</a> 图 4 if-elseif-else语句</p><ul><li>switch 语句适用于对多个<strong>整型值</strong>进行<strong>匹配判断</strong>，从而实现条件的分支控制，即“整型表达式 == int类型的值”</li><li>switch 语句后的表达式的数据类型只能是 byte、short、char、int 四种整数类型，枚举类型和 String 类型（从 Java 7 才允许），不能是 boolean 类型</li><li>switch 语句支持的基本数据类型只有四种：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>，<strong>不支持</strong> long 类型，本质：switch 仅仅只能支持 int 类型（byte、short、char 会自动提升为 int 类型）</li><li>switch 执行的时会把入口 case <strong>之后的 case</strong> 统统忽略，会一直往下执行，直到遇到 <code>break</code> 或 <code>return</code> (<strong>穿透</strong>)</li><li><code>default</code> 一般放在 switch 的最后，也不需要写 break</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>if 语句：针对单个条件判断</li><li>if-else 语句：针对两个相斥条件判断</li><li>if-else if-else 语句：针对多个相斥条件判断（<code>范围</code>）</li><li>switch 语句：针对多个相斥条件判断（<code>整型值</code>）</li></ul><h1 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h1><ul><li>循环结构：根据循环条件重复执行某段代码</li><li><strong>定义对象、变量</strong>、<strong>获取数据库连接</strong>等操作尽量移至循环体外处理</li></ul><h2 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>while (boolean 表达式) {    循环体;    迭代语句; // 自增或自减，用于对循环次数的控制}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/while%E5%BE%AA%E7%8E%AF.png" target="_blank" rel="noopener noreferrer">![while循环](03 流程控制.assets/1942a46273cc4012db13b032ed3b589e.png)</a> 图 5 while循环</p><ul><li>while 循环特点：先判断表达式，若为 true 就执行循环体，否则，跳过循环体</li><li>while 循环 和 do-while 循环 的循环体至少有 1 条语句用于对循环次数的控制（死循环除外）</li></ul><h2 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span>do-while 循环</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>do {    循环体;    迭代语句; // 自增或自减，用于对循环次数的控制} while (boolean 表达式);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/do-while%E5%BE%AA%E7%8E%AF.png" target="_blank" rel="noopener noreferrer">![do-while循环](03 流程控制.assets/5b8dc6c73aece7c00be2100de4843683.png)</a> 图 6 do-while循环</p><ul><li>do while 循环特点：先执行一次循环体，再判断表达式，若为 true 就执行循环体，否则，跳过循环体</li><li>while 循环 和 do-while 循环 的循环体至少有 1 条语句用于对循环次数的控制（死循环除外）</li></ul><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h2><ul><li>语法结构</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>for (初始化语句; boolean 表达式; 迭代语句) {    循环体;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行流程</li></ul><p><a href="https://sdky.gitee.io/img/for%E5%BE%AA%E7%8E%AF.png" target="_blank" rel="noopener noreferrer">![for循环](03 流程控制.assets/5e65474946e2c9a0a9f4d1ca6a6ad416.png)</a> 图 7 for循环</p><h2 id="死循环" tabindex="-1"><a class="header-anchor" href="#死循环"><span>死循环</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>while (true) {}do {} while (true)for ( ; ; ) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="循环选择" tabindex="-1"><a class="header-anchor" href="#循环选择"><span>循环选择</span></a></h2><ul><li>事先不知道循环次数，使用 while 循环或 do-while 循环，至少执行一次使用 do-while 循环</li><li>事先<strong>知道循环次数</strong>，优先使用 for 循环</li><li>死循环，推荐使用 while 循环</li></ul><h2 id="嵌套循环" tabindex="-1"><a class="header-anchor" href="#嵌套循环"><span>嵌套循环</span></a></h2><ul><li>重复的操作（内层循环） 需要做 N 次（外层循环）</li><li>确定：循环的是什么，要循环的次数</li><li>嵌套 for 循环性能优化： <ul><li>将循环变量的声明放在循环外</li><li>将循环次数少的作为外层循环</li></ul></li></ul><h2 id="循环控制" tabindex="-1"><a class="header-anchor" href="#循环控制"><span>循环控制</span></a></h2><ul><li><p><code>break</code>：<strong>结束</strong>当前 break 所在的整个循环</p></li><li><p><code>continue</code>：<strong>跳过</strong> continue 所在的<strong>本次循环</strong>剩下语句，开始下一次循环</p></li><li><p><code>return</code>：<strong>结束</strong> return 所在的方法</p></li><li><p>控制</p><p>外层循环</p><ul><li>在外层循环开始前使用<strong>标签</strong>标识一个外层循环，如 outer:</li><li>在 break 或 continue 后紧跟标签名，如 break outer; 或 continue outer;</li></ul></li><li><p>三者相同点：在其后不能写语句（这个语句与其在同一个花括号中），否则编译报错</p></li></ul><p>当前内容版权归 <a href="https://sdky.gitee.io/" target="_blank" rel="noopener noreferrer">sdky</a> 或其关联方所有，如需对内容或内容相关联开源项目进行关注与资助，请访问 <a href="https://sdky.gitee.io/" target="_blank" rel="noopener noreferrer">sdky</a> .</p>',57),n=[t];function r(d,o){return l(),i("div",null,n)}const h=e(a,[["render",r],["__file","index.html.vue"]]),p=JSON.parse(`{"path":"/notes/JavaSE/ybo5nhsc/","title":"03 流程控制","lang":"zh-CN","frontmatter":{"title":"03 流程控制","createTime":"2024/08/26 14:56:47","permalink":"/notes/JavaSE/ybo5nhsc/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"if 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":2,"title":"if-else 语句","slug":"if-else-语句","link":"#if-else-语句","children":[]},{"level":2,"title":"if-else if-else 语句","slug":"if-else-if-else-语句","link":"#if-else-if-else-语句","children":[]},{"level":2,"title":"switch 语句","slug":"switch-语句","link":"#switch-语句","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":2,"title":"do-while 循环","slug":"do-while-循环","link":"#do-while-循环","children":[]},{"level":2,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":2,"title":"死循环","slug":"死循环","link":"#死循环","children":[]},{"level":2,"title":"循环选择","slug":"循环选择","link":"#循环选择","children":[]},{"level":2,"title":"嵌套循环","slug":"嵌套循环","link":"#嵌套循环","children":[]},{"level":2,"title":"循环控制","slug":"循环控制","link":"#循环控制","children":[]}],"readingTime":{"minutes":4.62,"words":1386},"git":{"createdTime":1724666056000,"updatedTime":1724666056000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":1}]},"filePathRelative":"notes/JavaSE/01 基础/03 流程控制.md"}`);export{h as comp,p as data};

import{_ as a,c as e,o as s,d as i}from"./app-DxMRV8AP.js";const l={},n=i(`<h2 id="java-的开发工具" tabindex="-1"><a class="header-anchor" href="#java-的开发工具"><span>Java 的开发工具</span></a></h2><ul><li>javac：Java 编译器。将 Java 程序编译成字节码</li><li>java：Java 解释器。执行已经转换为字节码的文件</li><li>jdb：Java 调试器。调试 Java 程序</li><li>javap：反编译。将类文件还原回方法和变量</li><li>javadoc：文档生成器。创建 HTML 文件</li></ul><h2 id="java-运行基础" tabindex="-1"><a class="header-anchor" href="#java-运行基础"><span>Java 运行基础</span></a></h2><blockquote><p>JVM：Java 虚拟机</p></blockquote><ul><li>JVM 是–跨平台性的基础。被包含在 JDK 中。</li><li>不同平台有各自对应的不同 JVM</li><li>JVM 屏蔽了底层平台的区别。能做到 ”一次编译，到处运行”</li></ul><blockquote><p>JDK 全称：Java Development Kit（Java 开发工具包）</p></blockquote><ul><li>JDK = JRE + Java 的开发工具（Java，Javac，Javadoc 等等）</li><li>给开发人员使用的，包含 JRE</li></ul><blockquote><p>JRE：Java Runtime Enviroment（Java 运行环境）</p></blockquote><ul><li>JRE = JVM + Java SE 标准类库（Java 的核心类库）</li><li>运行一个 Java 程序的基本条件</li></ul><h2 id="java-执行流程分析" tabindex="-1"><a class="header-anchor" href="#java-执行流程分析"><span>Java 执行流程分析</span></a></h2><blockquote><p><code>.Java</code> 文件（源文件） — javac（编译）— <code>.class</code> 文件（字节码文件） — java（运行）— 结果</p></blockquote><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>javac [选项] 源文件名.java			//[] 中是可选项</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>通过编译器将 Java 源文件编译成 JVM 可识别的字节码文件。字节码文件是二进制格式的，其格式是统一的。在源文件目录下使用 Javac 编译工具对 Java 文件进行编译。</li><li>如果没有错误将没有提示，当前目录会对应其中每一个类生成对应名称的 <code>.class</code> 文件，即字节码文件，也是可执行的 Java 程序。</li></ul><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h3><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">java [选项] 程序名 [参数列表]			//[] 中是可选项</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>有了可执行的 Java 程序（字节码文件）</li><li>通过运行工具<code> Java.exe</code> 对字节码文件进行执行，本质是将 <code>.class</code> 文件装载到 JVM 运行。</li></ul><p><strong>注意，修改后的 .Java 源文件需要重新编译</strong></p><h2 id="java-开发注意事项和细节说明" tabindex="-1"><a class="header-anchor" href="#java-开发注意事项和细节说明"><span>Java 开发注意事项和细节说明</span></a></h2><ol><li><p>源文件以 <code>.java</code> 为扩展名，源文件的基本组成部分是类（class）</p></li><li><p>Java 应用程序的执行入口是 <code>main()</code> 方法。其有固定的<strong>书写格式：</strong></p><p><code>public static void main(string[]args){…}</code></p></li><li><p>Java 语言<strong>严格区分大小写</strong>。</p></li><li><p>Java 方法由一条条语句构成，<strong>每个语句都以 <code>;</code> 结束</strong>。</p></li><li><p><strong>大括号 <code>{</code> <code>}</code> 是成对出现的</strong>，缺一不可。习惯先写 <code>{}</code> 再写代码</p></li><li><p>一个源文件中<strong>最多只有一个 public 类</strong>，其余类不限。</p></li><li><p><strong>如果文件中包含 public 类，则文件名必须按该类命名。</strong></p></li><li><p>也可以把 main 方法写在非 public 类中，然后运行指定非 public 类，这样入口方法是非 public 类的主方法。</p></li><li><p><em><strong>在控制台按 tab 可以实现代码补齐。按方向键 ↑ 或 ↓ 可以调用历史代码。</strong></em></p></li></ol><h2 id="java-转义字符" tabindex="-1"><a class="header-anchor" href="#java-转义字符"><span>Java 转义字符</span></a></h2><ol><li><p><code>\\t</code>：一个制表位，实现对齐功能</p></li><li><p><code>\\n</code>：换行符</p></li><li><p><code>\\\\</code>：一个 <code>\\</code></p></li><li><p><code>\\&quot;</code>：一个 <code>&quot;</code></p></li><li><p><code>\\&#39;</code>：一个 <code>&#39;</code></p></li><li><p><code>\\r</code>：一个回车（不是换行）</p></li><li><p><code>\\.</code>：一个小圆点 <code>.</code></p></li><li><p><code>\\b</code>：退格键</p></li><li><p><code>\\u????</code>：一个具体的 Unicode 字符。其中 ??? 是 4 位 16 进制数</p><p><code>\\???</code>：一个具体的 Unicode 字符。其中 ??? 是 3 位 8 进制数</p></li></ol><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><blockquote><p>注释：用于注解说明程序的文字。其提高了代码的可读性，是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p><p>被注释的文字不会被 JVM 解释执行。</p></blockquote><h3 id="注释类型" tabindex="-1"><a class="header-anchor" href="#注释类型"><span>注释类型</span></a></h3><ul><li><p><strong>单行注释：</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>//这是一条单行注释</span></span>
<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>选中文字按 <code>ctrl</code> + <code>/</code> 将选中文字变为单行注释</p></li><li><p><strong>多行注释：</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/*	这</span></span>
<span class="line"><span>	是一段</span></span>
<span class="line"><span>	多行注释</span></span>
<span class="line"><span>	*/JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行注释中不允许多行注释嵌套。</p></li><li><p><strong>文档注释：</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>*@auther Melody</span></span>
<span class="line"><span>*@version 3.2.0</span></span>
<span class="line"><span>*/JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下写法也同样合法：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>	就是说咱可以每行开头不加星号的</span></span>
<span class="line"><span>*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释"><span>文档注释</span></a></h3><blockquote><p>文档注释的注释内容可被 JDK 中的 Javadoc 工具解析，生成一套以 HTML 形式体现的说明文档。</p><p>抽取注释：<code>javadoc -d 生成目录 -author -.. 文档名.java</code></p></blockquote><p>文档注释包含 <strong>标记</strong> 和紧随其后的 <strong>自由格式文本</strong>：</p><ul><li><p><strong>标记：</strong></p><p>以 <code>@</code> 开始，如 <code>@since</code></p><p>下面列出了一些 <strong>通用注释</strong>：</p><ul><li><p><code>@since 始于</code>：创建一个 <strong>始于</strong> 条目。其后文本可以是引入该特性的版本的任何描述</p></li><li><p><code>@author 作者</code>：产生一个 <strong>作者</strong> 条目。可以使用多个 <code>@author</code> 标记</p></li><li><p><code>@version 版本</code>：产生一个 <strong>版本</strong> 条目。这里的文本可以是对当前版本的任意描述</p></li><li><p><code>@link 超链接</code>：产生一个 <strong>超链接</strong>，链接到 javadoc 相关部分或外部文档</p><p><code>@see 引用</code>：在 <strong>see also</strong> 部分增加一个超链接。可以添加多个 <code>@see</code> 标记，但必须放在一起。</p><p>这里的 引用 有以下选择：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@see</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> com.test.Example#act()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@see</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;a herf=&quot;../../../../../../&quot;&gt;Melody&#39;s Box&lt;/a&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@see</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &quot;一段文本&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>只提供类、方法或变量的名字。那个场合，使用 <strong>#</strong> 来分隔类名和方法名</li><li><code>@see</code> 后有一个 <strong>&lt;</strong> 字符的场合，需要指定超链接。可以指向任何 URL</li><li><code>@see</code> 后有一个 <strong>“</strong> 字符的场合，文本会显示在 see alse 部分</li></ol></blockquote></li></ul></li><li><p><strong>自由格式文本：</strong></p><p>第一句应该是一个概要性的句子。javadoc 会自动抽取这些语句生成概要页</p><p>自由格式文本中，可以使用 HTML 修饰符</p></li></ul><h4 id="注释的插入" tabindex="-1"><a class="header-anchor" href="#注释的插入"><span>注释的插入</span></a></h4><p>javadoc 工具抽取文档注释时，会从以下位置抽取：</p><ul><li><p>模块</p></li><li><p>包（包注释）</p><p><strong>要想产生包注释，必须在每个包目录中添加一个单独的文件</strong></p><p>有 2 种方法：</p><ul><li>提供一个名为 package-info.java 的文件。其中 <strong>只能</strong> 包含文档注释，以及后面的一个 package 语句。不能包含更多的代码或注释。</li><li>提供一个名为 package.html 的 HTML 文件。此时会抽取 <code>&lt;body&gt;...&lt;/body&gt;</code> 间的所有文本</li></ul></li><li><p>公共类和接口（类注释）</p><p>类注释必须放在 import 语句后，类定义之前</p></li><li><p>公共的和受保护的字段</p><p>只需要对公共字段（通常是静态常量）建立文档</p></li><li><p>公共的和受保护的构造器和方法</p><p>方法注释必须放在所描述的方法之前。除了通用标记外，还能使用如下标记：</p><ul><li><p><code>@param 变量描述</code>：该标记能给当前方法的 <strong>参数</strong> 部分添加一个条目。该描述可以占据多行。</p><p>一个方法的所有 <code>@param</code> 标记必须放在一起</p></li><li><p><code>@return 返回值描述</code>：该标记能给当前方法的 <strong>返回值</strong> 部分添加一个条目。该描述可以占据多行。</p></li><li><p><code>@throws 异常描述</code>：该标记能给当前方法的可能抛出的 <strong>异常</strong> 添加一个条目。</p></li></ul></li></ul>`,33),t=[n];function d(o,c){return s(),e("div",null,t)}const r=a(l,[["render",d],["__file","index.html.vue"]]),v=JSON.parse(`{"path":"/notes/JavaSE/y2zwxkm0/","title":"01 Java概述","lang":"zh-CN","frontmatter":{"title":"01 Java概述","createTime":"2024/09/02 23:56:47","permalink":"/notes/JavaSE/y2zwxkm0/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"Java 的开发工具","slug":"java-的开发工具","link":"#java-的开发工具","children":[]},{"level":2,"title":"Java 运行基础","slug":"java-运行基础","link":"#java-运行基础","children":[]},{"level":2,"title":"Java 执行流程分析","slug":"java-执行流程分析","link":"#java-执行流程分析","children":[{"level":3,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]}]},{"level":2,"title":"Java 开发注意事项和细节说明","slug":"java-开发注意事项和细节说明","link":"#java-开发注意事项和细节说明","children":[]},{"level":2,"title":"Java 转义字符","slug":"java-转义字符","link":"#java-转义字符","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"注释类型","slug":"注释类型","link":"#注释类型","children":[]},{"level":3,"title":"文档注释","slug":"文档注释","link":"#文档注释","children":[]}]}],"readingTime":{"minutes":5.57,"words":1671},"git":{"createdTime":1724666056000,"updatedTime":1725355387000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":4}]},"filePathRelative":"notes/JavaSE/01 基础/01 Java概述.md"}`);export{r as comp,v as data};

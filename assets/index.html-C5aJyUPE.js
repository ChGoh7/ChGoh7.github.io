import{_ as e,c as s,e as a,o as t}from"./app-C8n7yTDe.js";const r={};function n(l,i){return t(),s("div",null,i[0]||(i[0]=[a(`<h2 id="问题背景" tabindex="-1"><a class="header-anchor" href="#问题背景"><span>问题背景</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">apache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">shiro</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">UnavailableSecurityManagerException</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> No SecurityManager accessible to the calling code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> either bound to the </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">apache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">shiro</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ThreadContext</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> or as a vm </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> singleton</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  This</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> is an invalid application configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>堆栈异常如上：</p><h2 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路"><span>解决思路</span></a></h2><p>这个报错的原因花了一段时间查找，有如下几种可能：</p><p><code>org.apache.shiro.UnavailableSecurityManagerException</code> 异常通常表示尝试获取 <code>SecurityManager</code> 时失败了，因为 <code>SecurityManager</code> 没有被正确地初始化或配置。这个异常可能由以下几个原因引起：</p><ol><li><strong>ShiroFilterFactoryBean 配置问题</strong>：如果你在使用 Spring 集成 Shiro 时遇到了这个问题，可能是因为 <code>ShiroFilterFactoryBean</code> 没有被正确配置。确保你已经将 <code>ShiroFilterFactoryBean</code> 设置为一个 <code>@Bean</code>，并在其内部设置了 <code>SecurityManager</code>。例如：</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Bean</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ShiroFilterFactoryBean </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shiroFilter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DefaultWebSecurityManager securityManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ShiroFilterFactoryBean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shiroFilterFactoryBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ShiroFilterFactoryBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    shiroFilterFactoryBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setSecurityManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">securityManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> shiroFilterFactoryBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>DelegatingFilterProxy 配置问题</strong>：在 Spring Boot 应用中，如果你使用了 <code>DelegatingFilterProxy</code> 来代理 Shiro 的过滤器，确保你已经正确配置了这个代理。例如：</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Bean</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FilterRegistrationBean </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">delegatingFilterProxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    FilterRegistrationBean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> filterRegistrationBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FilterRegistrationBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    DelegatingFilterProxy</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> DelegatingFilterProxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTargetFilterLifecycle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTargetBeanName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">shiroFilter</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 注意这里的 bean 名称要与 shiroFilterFactoryBean 的名称一致</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    filterRegistrationBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setFilter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> filterRegistrationBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p><strong>SecurityManager 未注入</strong>：确保 <code>SecurityManager</code> 已经被注入到你的应用上下文中，并且可以通过 <code>SecurityUtils</code> 获取到。如果没有注入，你需要配置一个 <code>SecurityManager</code> 的 bean，并确保它被 <code>ShiroFilterFactoryBean</code> 使用。</p></li><li><p><strong>Filter 执行顺序问题</strong>：如果你定义了自定义的过滤器，并且这些过滤器在 Shiro 的 <code>ShiroFilterFactoryBean</code> 之前执行，可能会导致 <code>SecurityManager</code> 未被正确设置。确保自定义过滤器是在 Shiro 过滤器之后执行的。</p></li><li><p><strong>Spring Boot 集成问题</strong>：如果你在使用 Spring Boot 集成 Shiro，可能需要额外注意配置的细节。例如，确保你的 <code>ShiroFilterFactoryBean</code> bean 名称与 <code>DelegatingFilterProxy</code> 中指定的名称一致。</p></li><li><p><strong>确保 Shiro 配置类被 Spring 管理</strong>：如果你的 Shiro 配置类没有被 Spring 管理，那么 <code>SecurityManager</code> 可能不会被正确初始化。确保你的配置类上有 <code>@Configuration</code> 注解。</p></li></ol><p>如果问题依然存在，建议检查 Shiro 配置类中的所有 <code>@Bean</code> 方法，确保它们都正确配置，并且没有遗漏任何必要的设置。同时，检查应用程序的日志，查看是否有其他相关的错误信息，这可能会提供更多关于问题的线索。</p><blockquote><p>也看看有没有配漏@Bean疏忽导致。</p></blockquote><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>最终找到一个方案解决：</p><p><code>DelegatingFilterProxy</code> 是 Spring 框架提供的一个非常有用的类，它的作用是将 Spring 容器管理的 Filter 代理为一个 Servlet Filter，这样就可以利用 Spring 的依赖注入和生命周期管理功能。这个代理类允许 Filter 实例享受 Spring 的依赖注入，并且可以通过 Spring 来管理 Filter 的生命周期 。</p><p>在 Spring Boot 应用中，如果你使用了 <code>Filter</code>，并且希望这些 <code>Filter</code> 能够注入 Spring 容器中的其他组件，你可以通过 <code>DelegatingFilterProxy</code> 来实现。这样，你就可以在 <code>Filter</code> 中注入业务工具类或其他 Spring 管理的 Bean，而不会出现注入为 <code>null</code> 的问题 。</p><p>关于 <code>ShiroFilterFactoryBean</code> 的配置，它是用来配置 Shiro 过滤器链的入口点。通过这个 Bean，你可以设置安全管理器、登录 URL、权限不足时的跳转 URL 等。同时，你还可以自定义过滤器，并将其加入到 Shiro 的过滤器链中 。</p><p>在使用 Shiro 时，如果你遇到了 <code>No SecurityManager accessible</code> 这样的异常，通常是因为 Shiro 没有正确地获取到 <code>SecurityManager</code> 实例。这可能是因为 <code>SecurityManager</code> 没有被注册为 Spring 容器中的一个 Bean，或者 <code>ShiroFilterFactoryBean</code> 没有正确地设置 <code>SecurityManager</code> 属性。确保你在配置 Shiro 时，已经定义了一个 <code>SecurityManager</code> 的 Bean，并且通过 <code>shiroFilterFactoryBean.setSecurityManager(securityManager())</code> 方法将其设置给了 <code>ShiroFilterFactoryBean</code> 。</p><p>最后，确保你的自定义过滤器没有被 Spring 容器重复管理。如果你的自定义过滤器被声明为一个 Spring Bean，并且也通过 <code>FilterRegistrationBean</code> 注册到了 Spring 容器中，那么它可能会被执行两次。为了避免这个问题，你可以选择不让 Spring 管理你的自定义过滤器，而是直接在 <code>ShiroFilterFactoryBean</code> 中通过 <code>new</code> 关键字创建实例 。</p><h2 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题"><span>相关问题</span></a></h2><h3 id="为什么使用-delegatingfilterproxy-而不是直接使用-filter" tabindex="-1"><a class="header-anchor" href="#为什么使用-delegatingfilterproxy-而不是直接使用-filter"><span>为什么使用 DelegatingFilterProxy 而不是直接使用 Filter？</span></a></h3><p><code>DelegatingFilterProxy</code> 是 Spring 提供的一个强大的工具，它允许你将 Spring 容器管理的过滤器（Filter）代理为一个 Servlet Filter。使用 <code>DelegatingFilterProxy</code> 而不是直接使用 Filter 主要有以下几个原因：</p><ol><li><p><strong>依赖注入</strong>： 使用 <code>DelegatingFilterProxy</code> 可以让你的过滤器享受到 Spring 的依赖注入功能。这意味着你可以在过滤器中注入其他 Spring 管理的 Bean，例如服务（Service）、数据访问对象（Repository）等。这在直接使用 Filter 时是无法做到的，因为 Filter 不是由 Spring 管理的。</p></li><li><p><strong>生命周期管理</strong>： Spring 管理的 Bean 有完整的生命周期管理，包括初始化和销毁回调。当你的过滤器作为 Spring Bean 时，你可以使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解来执行初始化和清理工作。这有助于管理资源，如数据库连接或文件句柄。</p></li><li><p><strong>集成 Spring Security</strong>： 如果你的应用使用 Spring Security，<code>DelegatingFilterProxy</code> 是集成 Spring Security 过滤器链的推荐方式。Spring Security 需要能够注入依赖项并管理生命周期，而 <code>DelegatingFilterProxy</code> 使得这一点成为可能。</p></li><li><p><strong>一致的配置方式</strong>： 使用 <code>DelegatingFilterProxy</code> 可以保持你的配置方式一致性。在 Spring 应用中，几乎所有的组件都是通过 Spring 容器来管理的。通过使用 <code>DelegatingFilterProxy</code>，你的过滤器可以像其他组件一样被声明和配置。</p></li><li><p><strong>避免 Filter 链问题</strong>： 直接在 web.xml 中定义 Filter 可能会导致 Filter 链的问题，特别是当与其他框架（如 Spring Security、Shiro 等）集成时。使用 <code>DelegatingFilterProxy</code> 可以避免这些问题，因为它允许 Spring 控制 Filter 的实例化和配置。</p></li><li><p><strong>简化 Filter 定义</strong>： 使用 <code>DelegatingFilterProxy</code>，你不需要在 web.xml 中定义 Filter。相反，你只需要定义一个 Filter Bean，并让 <code>DelegatingFilterProxy</code> 负责将请求委托给这个 Bean。这简化了配置，并减少了 web.xml 的复杂性。</p></li><li><p><strong>支持 Filter 之间的依赖关系</strong>： 在某些情况下，你可能需要定义 Filter 之间的依赖关系（例如，确保某些 Filter 在其他 Filter 之前或之后执行）。使用 <code>DelegatingFilterProxy</code> 和 Spring 的 <code>FilterChainProxy</code> 可以更容易地管理这些依赖关系。</p></li></ol><p>总之，<code>DelegatingFilterProxy</code> 提供了一种将 Spring 管理的 Bean 转换为 Servlet Filter 的方式，这使得你可以利用 Spring 的依赖注入、生命周期管理和其他特性。这在构建大型、复杂的 Web 应用时尤其有用。</p><h3 id="在spring中-filter和delegatingfilterproxy有什么区别" tabindex="-1"><a class="header-anchor" href="#在spring中-filter和delegatingfilterproxy有什么区别"><span>在Spring中，Filter和DelegatingFilterProxy有什么区别？</span></a></h3><p>在Spring框架中，<code>Filter</code> 和 <code>DelegatingFilterProxy</code> 都用于处理Web请求，但它们的使用场景和功能有所不同。以下是它们之间的主要区别：</p><ol><li><p><strong>Servlet Filter vs. Spring Bean</strong>:</p><ul><li><code>Filter</code>：是一个实现了 <code>javax.servlet.Filter</code> 接口的Java类，通常在 <code>web.xml</code> 中定义，由Servlet容器（如Tomcat）管理。</li><li><code>DelegatingFilterProxy</code>：是一个Spring提供的代理类，它将Spring容器管理的Bean代理为一个Servlet Filter。这意味着<code>DelegatingFilterProxy</code> 本身是一个Filter，但它内部委托给一个Spring管理的Bean来执行实际的Filter逻辑。</li></ul></li><li><p><strong>依赖注入</strong>:</p><ul><li><code>Filter</code>：由于是由Servlet容器管理，通常不能直接享受到Spring的依赖注入功能。</li><li><code>DelegatingFilterProxy</code>：由于内部委托给Spring管理的Bean，因此可以享受到Spring的依赖注入功能，包括自动装配、生命周期回调等。</li></ul></li><li><p><strong>生命周期管理</strong>:</p><ul><li><code>Filter</code>：其生命周期由Servlet容器管理，例如在Web应用启动和停止时创建和销毁Filter实例。</li><li><code>DelegatingFilterProxy</code>：除了由Servlet容器管理外，还可以利用Spring的生命周期管理功能，例如使用<code>@PostConstruct</code>和<code>@PreDestroy</code>注解。</li></ul></li><li><p><strong>配置方式</strong>:</p><ul><li><code>Filter</code>：通常在 <code>web.xml</code> 中配置，或者使用Servlet 3.0+的注解方式。</li><li><code>DelegatingFilterProxy</code>：作为Spring容器中的一个Bean来配置，可以在Spring配置文件或使用注解的方式定义。</li></ul></li><li><p><strong>使用场景</strong>:</p><ul><li><code>Filter</code>：适用于那些不需要Spring特定功能，或者需要在Spring上下文之外运行的Filter。</li><li><code>DelegatingFilterProxy</code>：适用于需要访问Spring上下文中的其他Bean，或者需要使用Spring特性（如依赖注入、生命周期管理）的Filter。</li></ul></li><li><p><strong>集成Spring Security</strong>:</p><ul><li>如果你使用Spring Security，<code>DelegatingFilterProxy</code> 是集成Spring Security过滤器链的推荐方式，因为它可以确保Spring Security的Filter能够作为Spring Bean被管理。</li></ul></li></ol><p>总结来说，<code>DelegatingFilterProxy</code> 提供了一种将Spring Bean转换为Servlet Filter的方式，使得你可以在Filter中使用Spring的特性，而普通的<code>Filter</code>则不具备这些特性。在实际开发中，选择使用哪种方式取决于你的具体需求和场景。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果需要在 <code>Filter</code> 中使用Spring的特性，如依赖注入或生命周期管理，那么使用 <code>DelegatingFilterProxy</code> 是一个更好的选择。如果你的 <code>Filter</code> 不需要这些Spring特性，那么直接使用 <code>Filter</code> 可能是一个更简单直接的选择。</p><p>在Shiro与Spring集成时，通常建议使用 <code>DelegatingFilterProxy</code> 来代理Shiro的 <code>Filter</code>，这样可以确保Shiro的 <code>Filter</code> 能够享受到Spring的依赖注入和生命周期管理功能。例如，在Spring配置文件中配置Shiro的 <code>ShiroFilterFactoryBean</code> 时，可以通过 <code>DelegatingFilterProxy</code> 来确保Shiro的 <code>Filter</code> 被Spring容器管理 。</p>`,32)]))}const h=e(r,[["render",n],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/article/xm0r5f3q/","title":"记一次UnavailableSecurityManagerException异常","lang":"zh-CN","frontmatter":{"title":"记一次UnavailableSecurityManagerException异常","createTime":"2024/10/20 21:14:53","permalink":"/article/xm0r5f3q/","tags":["Apache Shiro","FAQ"]},"headers":[],"readingTime":{"minutes":8.05,"words":2415},"git":{"updatedTime":1735020969000,"contributors":[{"name":"chgoh7","username":"chgoh7","email":"3180349973@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/chgoh7?v=4","url":"https://github.com/chgoh7"}],"changelog":[{"hash":"0d58fa92e647bb5a95ec57d583f1aa0960bb74e4","date":1735020969000,"email":"3180349973@qq.com","author":"chgoh7","message":"docs: new update","commitUrl":"https://github.com/ChGoh7/ChGoh7.github.io/tree/docs/commit/0d58fa92e647bb5a95ec57d583f1aa0960bb74e4"},{"hash":"c3178f5b238d4b9a81e96d36d410336ed5025f12","date":1734882122000,"email":"3180349973@qq.com","author":"chgoh7","message":"update lastest  vp","commitUrl":"https://github.com/ChGoh7/ChGoh7.github.io/tree/docs/commit/c3178f5b238d4b9a81e96d36d410336ed5025f12"},{"hash":"f3f31f1b1320b951d0aa5d733b574b11fd5c61fc","date":1729445864000,"email":"3180349973@qq.com","author":"chgoh7","message":"docs: add blog about springboot intergration about  shiro","commitUrl":"https://github.com/ChGoh7/ChGoh7.github.io/tree/docs/commit/f3f31f1b1320b951d0aa5d733b574b11fd5c61fc"}]},"filePathRelative":"WORK/BACKEND/Shiro/记一次UnavailableSecurityManagerException异常.md","categoryList":[{"id":"9f20f1","sort":10024,"name":"WORK"},{"id":"6caed3","sort":10026,"name":"BACKEND"},{"id":"5c3cbb","sort":10029,"name":"Shiro"}],"bulletin":false}');export{h as comp,p as data};

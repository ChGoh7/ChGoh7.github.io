import{_ as e,c as s,o as i,a}from"./app-D4-BRUvs.js";const n={},l=a('<p>变量是程序的基本组成单位</p><h2 id="变量使用注意事项" tabindex="-1"><a class="header-anchor" href="#变量使用注意事项"><span>变量使用注意事项</span></a></h2><ol><li>变量表示内存中的一个存储区域。不同变量，不同类型，占用的空间大小不同。如 <code>int</code> 有 4 byte，而 <code>double</code> 有 8 byte。</li><li>该区域有自己的名称 <code>变量名</code> 和类型 <code>数据类型</code></li><li>变量必须先声明，后使用。</li><li>变量在同一作用域内不能重名。</li><li>该区域的数据 · 值可以在同一类型范围内变化。</li><li>变量的三个基本要素：类型 + 名称 + 值</li></ol><h2 id="程序中-的使用" tabindex="-1"><a class="header-anchor" href="#程序中-的使用"><span>程序中 <code>+</code> 的使用</span></a></h2><ol><li><p>当左右两边都是数值型，做加法运算</p></li><li><p>当左右两边任意一方为字符串，做拼接运算</p></li><li><p>运算顺序是从左到右的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		// 输出 2a11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="java-数据类型" tabindex="-1"><a class="header-anchor" href="#java-数据类型"><span>Java 数据类型</span></a></h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><ul><li><strong>数值型</strong><ul><li>整数类型： <ul><li>byte：占用 1 字节</li><li>short：占用 2 字节</li><li>int：占用 4 字节</li><li>long：占用 8 字节</li></ul></li><li>浮点（小数）类型： <ul><li>float：占用 4 字节</li><li>double：占用 8 字节</li></ul></li></ul></li><li><strong>字符型</strong><ul><li>char：存放单个字符，占用 2 字节</li></ul></li><li><strong>布尔型</strong><ul><li>boolean：存放 true（真），false（假）。占用 1 字节</li></ul></li></ul><h3 id="引用数据类型-复合数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型-复合数据类型"><span>引用数据类型（复合数据类型）</span></a></h3><ul><li><p><strong>类</strong>：class</p><p><em><strong>——详见 [[ 6 类与对象 ]](https://i-melody.github.io/2021/11/29/Java/入门阶段/6 面向对象编程（基础）/#6-1-类与对象（OOP）)</strong></em></p></li><li><p><strong>接口</strong>：interface</p><p><em><strong>——详见 [[ 9.7 接口 ]](https://i-melody.github.io/2021/12/14/Java/入门阶段/9 面向对象编程（高级）/#9-7-接口)</strong></em></p></li><li><p><strong>数组</strong>：<code>[]</code></p><p><em><strong>——详见 [[ 5 数组、排序和查找 ]](https://i-melody.github.io/2021/11/27/Java/入门阶段/5 数组、排序和查找/#5-数组、排序和查找)</strong></em></p></li></ul><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><blockquote><p>用于存放整数值</p></blockquote><ul><li><code>byte</code> 占用 1 字节，范围 -128 ~ 127</li><li><code>short</code> 占用 2 字节，范围 -215 ~ 215 - 1</li><li><code>int</code> 占用 4 字节，范围 -231 ~ 231 - 1</li><li><code>long</code> 占用 8 字节，范围 -263 ~ 263 - 1</li></ul><p><strong>使用细节：</strong></p><ol><li>Java 各整数类型有固定的范围和字符长度，不受具体 OS（操作系统）影响，以保证 Java 程序的可移植性。</li><li>Java 默认整型常量为 <code>int</code> ，要声明 <code>long</code> 型常量必须后加 <code>l</code> 或 <code>L</code>。</li><li>从 Java 7 开始，加上前缀 <code>0b</code> 或 <code>0B</code> 就可以写二进制数。</li><li>从 Java 7 开始，可以为数字字面添加下划线。这不会影响数字的值，只是为了方便阅读。</li></ol><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int n = 0b0010;</span></span>\n<span class="line"><span>n = 0b001;</span></span>\n<span class="line"><span>n = 100_0_000000;</span></span>\n<span class="line"><span>n = 0B0000_0010_1100;</span></span>\n<span class="line"><span>float f = 1.0F;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果基本的整数、浮点类型不能满足范围、精度的需求，可以使用 “大数”</p><p><em><strong>—— 大数，见 [[12.8 BigInteger 和 BigDecimal 类]](https://i-melody.github.io/2021/12/19/Java/入门阶段/12 常用类/#12-8-BigInteger-和-BigDecimal-类)</strong></em></p><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h2><blockquote><p>可以表示一个小数</p></blockquote><ul><li><code>float</code> 单精度（6 ~ 7 位有效数字），占用 4 字节，范围约 -3.403E38 ~ 3.403E38</li><li><code>double</code> 双精度（15 位有效数字），占用 8 字节，范围约 -1.798E308 ~ 1.798E308</li></ul><p><em>浮点数在机器中存放形式为：浮点数 = 符号位 + 指数位 + 尾数位</em></p><p><em><strong>因此，尾数部分可能丢失，造成精度损失。换言之，小数都是近似值</strong></em></p><h3 id="使用细节" tabindex="-1"><a class="header-anchor" href="#使用细节"><span>使用细节</span></a></h3><ol><li><p>与整数类型相似，有固定的范围和字符长度，不受具体 OS（操作系统）影响。</p></li><li><p>Java 默认浮点常量为 <code>double</code> ，要声明 <code>float</code> 型常量必须后加 ”f“ 或 ”F“</p></li><li><p>浮点型常量有两种表示形式</p><blockquote><p>十进制数形式：<code>5.13</code>、<code>315.4F</code>、<code>.414</code></p><p>科学计数法：<code>5.12e2</code> 即[5.12 × 102]、<code>5.12E-2</code> 即[5.12 / 102]</p></blockquote></li><li><p>通常情况下，应该使用 <code>double</code> 类型，以其更为精确。</p></li><li><p>浮点数使用陷阱：当我们对运算结果是小数的进行相对判断时，要小心。（因为<em><strong>小数都是近似值</strong></em>）</p><p>正确方法是：<strong>以两个数差值的绝对值，在某个精度范围内判断</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if (Math.abs(num1 - num2) &lt; 0.00001) {</span></span>\n<span class="line"><span>	System.out.println(&quot;插值范围内认为相等&quot;);</span></span>\n<span class="line"><span>}JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特殊的浮点类型常量</p><ul><li><p>正无穷大：<code>Float.POSITIVE_INFINITY</code>、<code>Double.POSITIVE_INFINITY</code></p><p>（浮点数运算中）一个正数除以 0，会得到该值</p></li><li><p>负无穷大：<code>Float.NEGATIVE_INFINITY</code>、<code>Double.NEGATIVE_INFINITY</code></p><p>（浮点数运算中）一个负数除以 0，会得到该值</p></li><li><p>0 / 0：<code>Float.NaN</code>、<code>Double.NaN</code></p><p>（浮点数运算中）0 除以 0，会得到该值</p></li><li><p>最大、最小值：<code>Float.MAX_VALUE</code>、<code>Double.MIN_VALUE</code></p></li></ul></li><li><p>不能用运算符来比较特殊值，而要用特别的方法</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>double num = 0.0 / 0;</span></span>\n<span class="line"><span>System.out.println(num == Double.NaN);			// &lt;——— 始终为 false。不能如此比较</span></span>\n<span class="line"><span>System.out.println(Double.isNaN(num));			// &lt;——— 判断是否是 NaN</span></span>\n<span class="line"><span>num = 1.0 / 0;</span></span>\n<span class="line"><span>System.out.println(Double.isInfinite(num));		// &lt;——— 是否是无穷大JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>由于不同处理器寄存浮点数的策略可能不同，浮点数运算的结果也可能不同。</p><p><em><strong>—— 见 [[12.1.4 strictfp 关键字]](https://i-melody.github.io/2021/12/19/Java/入门阶段/12 常用类/#12-1-4-strictfp-关键字)</strong></em></p></li></ol><h2 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h2><blockquote><p>可以表示单个字符。（可以存放一个数字，因为其字符是数字编号的。输出时会输出数字对应的字符。”编码的概念“）</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char c1 = &#39;a&#39;;` `char c2 = &#39;\\t&#39;;` `char c3 = &#39;字&#39;;` `char c4 = 99;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h3 id="使用细节-1" tabindex="-1"><a class="header-anchor" href="#使用细节-1"><span>使用细节</span></a></h3><ol><li><p>字符常量用单引号括起 `‘字’</p></li><li><p><code>char</code> 的本质是一个整数，输出时，输出的是 unicode 码对应的字符。[unicode 码查询](https://i-melody.github.io/2021/11/22/Java/入门阶段/2 变量/tool.chinaz.com/Tools/Unicode.aspx) 。</p><p>要输出那个整数，用 <code>int</code></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char c1 = &#39;a&#39;;</span></span>\n<span class="line"><span>System.out.println((int)c1);JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>char</code> 是可以进行运算的，其相当于一个整数。<em><strong>注意与 [[2.2 示例]](https://i-melody.github.io/2021/11/22/Java/入门阶段/2 变量/#2-2-程序中-的使用) 的区别</strong></em></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>// 注：(int)&#39;a&#39; = 97</span></span>\n<span class="line"><span>char c1 = &#39;a&#39; + 1;				// 相当于 char c1 = &#39;b&#39;</span></span>\n<span class="line"><span>System.out.println(&#39;a&#39; + 1);	// 这个代码输出 98</span></span>\n<span class="line"><span>System.out.println(&quot;a&quot; + 1);	// 这个代码输出 a1JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符允许使用转义符（<em>见 [1.8 Java 转义字符]</em>）</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char c = &#39;\\u0041&#39;;</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转义序列 \\u 能出现在引号外。所有这些转义序列会在解析代码前得到处理</strong></p><ul><li><p>以下字符串是空串：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>String s = &quot;\\u0022+\\u0022&quot;;</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 \\u0022 表示引号。该代码等同于以下代码</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>String s = &quot;&quot; + &quot;&quot;;</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以下注释会报错：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>// \\u000A is a newline</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 \\u000A 是换行符。在解析前会得到处理。在程序看来，上述注释等于以下写法</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>// </span></span>\n<span class="line"><span>is a newlineJAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以下注释也会报错：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>// look inside c:\\users</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为程序认为，\\users 不是一个合法的转义字符</p></li><li><p>在某些场合下这种写法似乎也能实现：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int\\u005B\\u005D a;			// int[] a; 一个数组</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="字符本质与编码表" tabindex="-1"><a class="header-anchor" href="#字符本质与编码表"><span>字符本质与编码表</span></a></h3><ul><li><p>字符类型的本质，是把字符对应的码值编程二进制，存储。显示时将二进制代码转化为码值，找到对应的字符。</p></li><li><p>字符与码值的对应关系是字符编码表规定的。</p><blockquote><p>ASCII 编码表，占用 1 byte，共有 128 个字符。</p><p>Unicode 编码表，占用 2 byte，字母汉字都占用 2 byte，这样可能浪费空间。0 - 127 的字符与 ASCII 相同，所以兼容 ASCII。</p><p>UTF-8 编码表，根据不同符号大小可变（1 - 6 byte），字母占用 1 byte，汉字占用 3 byte。是 Unicode 的改进，是互联网上使用最广的 Unicode 实现方式。</p><p>GBK 编码表，可以表示汉字，字母占用 1 byte，汉字占用 2 byte。</p><p>GB2312 编码表，可以表示汉字（GB2312 &lt; GBK）</p><p>BIG5 编码表，可以存放繁体中文（香港，台湾）</p></blockquote></li><li><p>UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。包含从 U+0000 到 U+FFFF 的经典 Unicode 代码（16位，1 个代码单元），以及 U+10000 到 U+10FFFF 的辅助字符（32位，2 个代码单元）</p></li><li><p>在 Java 中，char 类型描述的是 UTF-16 编码中的 1 个代码单元。</p><p>字符串中的一个辅助字符（如 🎶）可能占用 2 个代码单元。这个场合，使用 char 可能会导致错误</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>String str = &quot;🎶Melody🎶&quot;;</span></span>\n<span class="line"><span>char c = str.charAt(1);			// &lt;———— 这个场合，c 是 🎶 符号的第二个代码单元而非 &#39;M&#39;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因此，一般不建议在程序中使用 char 类型</strong></p></li></ul><h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h2><blockquote><p><code>boolean</code> 只允许取值 <code>ture</code> 或 <code>false</code> ，没有 <code>null</code>。适用于逻辑运算，通常用于程序流程控制</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if` `while` `do-while` `for</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><p><strong>使用细节：</strong></p><ol><li><p>不可以用 0 或 非0 的整数替代 <code>false</code> 或 <code>ture</code> 。这点和 C语言 不同。</p></li><li><p>不能让布尔类型转换为其他类型。如需转换，请使用如下方法：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>boolean b = true;</span></span>\n<span class="line"><span>int n = b ? 0 : 1;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>——见 [[3.5 三元运算符]](https://i-melody.github.io/2021/11/23/Java/入门阶段/3 运算符/#3-5-三元运算符)</strong></em></p></li></ol><h2 id="基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型转换"><span>基本数据类型转换</span></a></h2><h3 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换"><span>自动类型转换</span></a></h3><blockquote><p>自动类型转换：Java 在进行赋值或运算时，精度（容量）小的类型自动转换为精度（容量）大的类型。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char` &gt; `int `&gt; `long` &gt; `float` &gt; `double</span></span>\n<span class="line"><span>byte` &gt; `short` &gt; `int `&gt; `long` &gt; `float` &gt; `double</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：<code>int a = &#39;c&#39;</code> 或者 <code>double b = 80</code></p></blockquote><h4 id="使用细节-2" tabindex="-1"><a class="header-anchor" href="#使用细节-2"><span>使用细节</span></a></h4><ol><li><p>有多种类型数据混合运算时，系统会将所有数据转换成容量最大的那种，再进行运算。</p></li><li><p>如若把大精度（容量）数据赋值给小精度（容量）类型，就会报错（小数由于精度原因，大赋小会丢失精度，必不可用。但整数大赋小时：1.赋予具体数值时，判断范围。2.变量赋值时，判断类型。反之进行自动类型转换。</p></li><li><p><code>byte</code> <code>short</code> <code>char</code> 三者不会相互自动转换，但可以计算。计算时首先转化为 <code>int</code>。</p><blockquote><p><code>byte a = 1;</code></p><p><code>byte b = 1;</code></p><p><code>a + b</code> 结果是 <code>int</code> 类型</p></blockquote></li><li><p><code>boolean</code> 类型不参与自动转换</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</p></li></ol><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换"><span>强制类型转换</span></a></h3><blockquote><p>强制类型转换：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时加上强制转换符 <code>( )</code> ，但<strong>可能造成精度降低或溢出</strong>，要格外注意。</p></blockquote><h4 id="使用细节-3" tabindex="-1"><a class="header-anchor" href="#使用细节-3"><span>使用细节</span></a></h4><ol><li><p>当进行数据从大到小转换时，用强制转换。</p></li><li><p>强制转换只能对最近的操作数有效，往往会使用 <code>( )</code> 提升优先级。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int a = (int)(3 * 2.5 + 1.1 * 6);</span></span>\n<span class="line"><span>JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>char</code> 可以保留 <code>int</code> 的常量值，但不能保存其变量值。此时需要强制类型转换。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int a = 10;</span></span>\n<span class="line"><span>char b = 10;</span></span>\n<span class="line"><span>char c = (char)a;JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>byte</code> <code>short</code> <code>char</code> 在进行运算时，当作 <code>int</code> 处理。</p></li></ol><h3 id="基本数据类型和-string-的转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型和-string-的转换"><span>基本数据类型和 <code>String</code> 的转换</span></a></h3><ul><li><p>基本类型转 <code>String</code>：基本数据类型加上 <code>&quot; &quot;</code>。即利用了 <em><strong>[[2.2.2]](https://i-melody.github.io/2021/11/22/Java/入门阶段/2 变量/#2-2-程序中-的使用)</strong></em> 中的方法。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int n1 = 100;</span></span>\n<span class="line"><span>String s = n1 + &quot;&quot;;</span></span>\n<span class="line"><span>System.out.println(n1 + &quot;&quot; + n1 + &quot;&quot; + n1 + &quot;&quot;);JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>String</code> 转基本数据类型：通过基本数据类型的包装类调用 <code>parseXX</code> 方法。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>String s = &quot;100&quot;;</span></span>\n<span class="line"><span>int n1 = Interger parseInt(s);JAVA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特别的，把 <code>String</code> 转换为 <code>char</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">charAt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		// 得到 s 字符串中的第一个字符。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="使用细节-4" tabindex="-1"><a class="header-anchor" href="#使用细节-4"><span>使用细节</span></a></h4><ol><li>将 <code>String</code> 转成基本数据类型时，要保证其能转换为有效数据。即不能把 <code>&quot;Hello&quot;</code> 转换成 <code>int</code>。</li><li>如果格式不正确，会抛出[异常](https://i-melody.github.io/2021/12/18/Java/入门阶段/11 异常/)，程序会中止。</li></ol>',48),t=[l];function d(c,o){return i(),s("div",null,t)}const r=e(n,[["render",d],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/notes/JavaSE/qotc6zk7/","title":"02 变量","lang":"zh-CN","frontmatter":{"title":"02 变量","createTime":"2024/09/03 00:22:48","permalink":"/notes/JavaSE/qotc6zk7/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"变量使用注意事项","slug":"变量使用注意事项","link":"#变量使用注意事项","children":[]},{"level":2,"title":"程序中 + 的使用","slug":"程序中-的使用","link":"#程序中-的使用","children":[]},{"level":2,"title":"Java 数据类型","slug":"java-数据类型","link":"#java-数据类型","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用数据类型（复合数据类型）","slug":"引用数据类型-复合数据类型","link":"#引用数据类型-复合数据类型","children":[]}]},{"level":2,"title":"整数类型","slug":"整数类型","link":"#整数类型","children":[]},{"level":2,"title":"浮点类型","slug":"浮点类型","link":"#浮点类型","children":[{"level":3,"title":"使用细节","slug":"使用细节","link":"#使用细节","children":[]}]},{"level":2,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[{"level":3,"title":"使用细节","slug":"使用细节-1","link":"#使用细节-1","children":[]},{"level":3,"title":"字符本质与编码表","slug":"字符本质与编码表","link":"#字符本质与编码表","children":[]}]},{"level":2,"title":"布尔类型","slug":"布尔类型","link":"#布尔类型","children":[]},{"level":2,"title":"基本数据类型转换","slug":"基本数据类型转换","link":"#基本数据类型转换","children":[{"level":3,"title":"自动类型转换","slug":"自动类型转换","link":"#自动类型转换","children":[]},{"level":3,"title":"强制类型转换","slug":"强制类型转换","link":"#强制类型转换","children":[]},{"level":3,"title":"基本数据类型和 String 的转换","slug":"基本数据类型和-string-的转换","link":"#基本数据类型和-string-的转换","children":[]}]}],"readingTime":{"minutes":9.15,"words":2745},"git":{"createdTime":1725295233000,"updatedTime":1725355387000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":2}]},"filePathRelative":"notes/JavaSE/01 基础/02 变量.md"}`);export{r as comp,u as data};

import{_ as e,c as l,o as t,a}from"./app-C1B56CAV.js";const i={},o=a('<h2 id="stringutils" tabindex="-1"><a class="header-anchor" href="#stringutils"><span>StringUtils</span></a></h2><ul><li>StringUtils 是提供字符串操作的工具类，提供的方法如下：</li><li><code>boolean isEmpty(String str)</code>：如果参数 str 为 NULL 或者 str.length() == 0 返回 true</li><li><code>boolean isNotEmpty(String str)</code>：判断给定参数是否不为空</li><li><code>boolean isBlank(String str)</code>：如果参数 str 为 NULL 或者其长度等于 0，又或者其由空格组成，那么此方法都返回 true。</li><li><code>boolean isNotBlank(String str)</code></li><li><code>boolean isAnyBlank(CharSequence… css)</code></li><li><code>boolean isNoneBlank(CharSequence… css)</code></li><li><code>boolean isAnyEmpty(CharSequence… css)</code></li><li><code>boolean isNotEmpty(final CharSequence cs)</code></li><li><code>String trim(String str)</code>：去除字符串开头和结尾处的空格字符（如果参数 str 为 null，则返回 null）</li><li><code>String stripStart(String str, String stripChars)</code>：去掉 str 前端的在 stripChars 中的字符</li><li><code>String stripEnd(String str, String stripChars)</code>：去掉 str 末端的在 stripChars 中的字符</li><li><code>int ordinalIndexOf(String str, String searchStr, int ordinal)</code>：返回字符串 search 在字符串 str 中第 ordinal 次出现的位置（如果 str=null 或 searchStr=null 或 ordinal&lt;=0 则返回-1）</li></ul><h2 id="stringescapeutils" tabindex="-1"><a class="header-anchor" href="#stringescapeutils"><span>StringEscapeUtils</span></a></h2><ul><li>StringEscapeUtils 这个类里提供了很多转义的方法，比如可以转成 json、xml、html 等格式</li><li>已被 org.apache.commons.text.StringEscapeUtils 取代</li><li><code>String escapeJava(String str)</code>：使用 java String rules 转义给定字符串 str（转为 unicode 编码）</li><li><code>String escapeJavaScript(String str)</code>：与 escapeJava() 方法的唯一区别是，在 javaScript 中，单引号必须被转义</li><li><code>String escapeHtml4(String input)</code></li></ul><h2 id="arrayutils" tabindex="-1"><a class="header-anchor" href="#arrayutils"><span>ArrayUtils</span></a></h2><ul><li>全局静态常量：EMPTY*__ARRAY（根据* 处的类型，返回对应的长度为 0 的数组）、INDEX_NOT_FOUND（-1，表示数组下标未找到）</li><li><code>String toString(Object array, String stringIfNull)</code>：如果为空，返回 stringIfNull</li><li><code>int hashCode(Object array)</code>：使用 HashCodeBuilder 返回数组的 hashcode</li><li><code>boolean isEquals(Object array1, Object array2)</code>：用 EqualsBuilder 返回两个数组比较的结果</li><li><code>Map&lt;Object, Object&gt; toMap(Object[] array)</code>：Converts the given array into a Map. 作为参数的数组有两个选择：一是成员为 Map.Entry，然后通过遍历该数组，把 Map.Entry 拆分并分别放入新生成 Map 的 Key 和 Value 中；二是成员为长度大于等于 2 的数组，位置 0 的元素作为 key，位置 1 的元素作为 value</li><li><code>xxx[] clone(xxx[] array)</code>：如果不为空，则使用参数自己的 clone 方法处理</li><li><code>Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive)</code>：数组拷贝</li><li><code>void reverse(Object[] array, int startIndexInclusive, int endIndexExclusive)</code>：数组元素反转（从数组前后两个坐标 i, j 开始，交换数据，并向中间移动，当 i&gt;j 时停止）</li><li><code>int indexOf(Object[] array, Object objectToFind, int startIndex)</code>：查找数组元素位置，return -1 if not found or null array input</li><li><code>boolean contains(Object[] array, Object objectToFind)</code>：查找元素是否存在数组中</li><li><code>boolean isEmpty(Object[] array)</code>：判断是否为空，length=0 或 null 都属于空</li><li><code>Xxx[] toObject(xxx[] array)</code>：将基本类型数组转为包装类型数组</li><li><code>Object[] addAll(Object[] array1, Object… array2)</code>：并集操作，合并数组</li></ul><h2 id="dateutils" tabindex="-1"><a class="header-anchor" href="#dateutils"><span>DateUtils</span></a></h2><ul><li>全局静态常量：MILLIS_PER_SECOND、MILLIS_PER_SECOND、MILLIS_PER_MINUTE、MILLIS_PER_HOUR、MILLIS_PER_DAY</li><li>日期比较<code>boolean isSameDay(Date date1, Date date2)``boolean isSameDay(Calendar cal1, Calendar cal2)</code>：比较日期是否相同，忽略 time（通过比较 Calendar.ERA、YEAR、DAY_OF_YEAR 三个属性判断给定日期是否相同）</li><li>时间比较<code>boolean isSameInstant(Date date1, Date date2)``boolean isSameInstant(Calendar cal1, Calendar cal2)</code>：比较时间是否相同（通过 Date 类中的 getTime() 方法）</li><li>add 族<code>Date addYears(Date date, int amount)</code>：在给定日期 date 的基础上添加 amount 年，返回新的对象<code>Date addMonths(Date date, int amount)</code>：添加月<code>Date addWeeks(Date date, int amount)</code>：添加周<code>Date addDays(Date date, int amount)</code>：添加日<code>Date addHours(Date date, int amount)</code>：添加小时<code>Date addMinutes(Date date, int amount)</code>：添加分钟<code>Date addSeconds(Date date, int amount)</code>：添加秒<code>Date addMilliseconds(Date date, int amount)</code>：添加毫秒</li><li>set 族<code>Date setYears(Date date, int amount)</code>：为 date 设置新的年份信息，并返回一个新的对象，对象 date 未发生改变<code>Date setMonths(Date date, int amount)</code>：设置月份<code>Date setDays(Date date, int amount)</code>：设置日期<code>Date setHours(Date date, int amount)</code>：设置小时<code>Date setMinutes(Date date, int amount)</code>：设置分钟<code>Date setSeconds(Date date, int amount)</code>：设置秒<code>Date setMilliseconds(Date date, int amount)</code>：设置毫秒</li><li>round 族、truncate 族、ceil 族：日期取整（日期精度调节，如调节至秒/分等）<code>Date round(Date date, int field)</code>：相当于数学中的四舍五入法取整<code>Date truncate(Date date, int field)</code>：相当于去余法取整<code>Date ceiling(Date date, int field)</code>：相当于向上取整</li></ul><h2 id="dateformatutils" tabindex="-1"><a class="header-anchor" href="#dateformatutils"><span>DateFormatUtils</span></a></h2><ul><li>与 JDK 的 SimpleDateFormat 相比，其主要优点是：线程安全，常用的方法 <code>String format(Date date, String pattern)</code></li><li>DateFormatUtils 定义了很多内置的固定日期格式，均为 FastDateFormat 类型，如 ISO_DATE_FORMAT</li><li>使用 FastDateFormat 的 format() 方法可以直接将日期格式化为内置的固定格式 <code>String format (Date date)</code></li></ul><h2 id="numberutils" tabindex="-1"><a class="header-anchor" href="#numberutils"><span>NumberUtils</span></a></h2><ul><li>为 JDK 中的 Number 类提供额外的功能</li><li>提供可复用的值为 0, 1 的数值型的包装类，包括 Long、Integer、Short、Byte、Double、Float</li><li><code>boolean isParsable(String str)</code>：判断字符串是否可以转换为 number</li><li><code>boolean isDigits(String str)</code>：判断字符串是否是只包含数字字符</li><li><code>Xxx toXxx(String str, xxx defaultValue)</code>：将给定的字符串装换成 xxx 类型的数值类型，包括 Long\\Integer\\Short\\Byte\\Double\\Float，如果指定了默认值，那么当 String 为空，或是转换发生异常，则返回指定的默认值 xxx</li><li><code>Xxx createXxx(String str)</code>：用给定的字符串创建 Xxx 数值类型的对象，包括 Float\\Double\\Integer\\Long\\BigInteger\\BigDecimal</li><li><code>Xxx min(Xxx[] array)</code>：从类型为 Xxx 的数组中找出最小的，Xxx 可为 long\\float\\double\\byte\\short\\int，时间复杂度是 O(n)</li><li><code>Xxx max(Xxx[] array)</code>：从类型为 Xxx 的数组中找出最大的</li></ul><h2 id="randomutils" tabindex="-1"><a class="header-anchor" href="#randomutils"><span>RandomUtils</span></a></h2><ul><li>随机数据生成类，包括浮点，双精，布尔，整形，长整在内的随机数生成</li><li><code>int nextInt(int startInclusive, int endExclusive）</code>，类似方法：nextLong()、nextBoolean()、nextFloat()、nextDouble()</li></ul><h2 id="randomstringutils" tabindex="-1"><a class="header-anchor" href="#randomstringutils"><span>RandomStringUtils</span></a></h2><h2 id="stopwatch" tabindex="-1"><a class="header-anchor" href="#stopwatch"><span>StopWatch</span></a></h2><h2 id="pair-、triple" tabindex="-1"><a class="header-anchor" href="#pair-、triple"><span>Pair\\、Triple\\</span></a></h2><ul><li>Pair\\ implements Map.Entry\\，表示由两个元素组成的一个配对，实现类：ImmutablePair、MutablePair</li><li>Triple\\，表示由 3 个元素组成的一个组，实现类：ImmutableTriple、MutableTriple</li><li>类方法<code>Pair&lt;L, R&gt; of(final L left, final R right)``Triple&lt;L, M, R&gt; of(final L left, final M middle, final R right)</code></li><li>实例方法：<code>L getLeft()</code>、<code>M getMiddle()</code>、<code>R getRight()</code></li></ul><h2 id="反射相关" tabindex="-1"><a class="header-anchor" href="#反射相关"><span>反射相关</span></a></h2><h3 id="fieldutils" tabindex="-1"><a class="header-anchor" href="#fieldutils"><span>FieldUtils</span></a></h3><ul><li>通过反射技术来操作成员变量</li><li>带有 Declared 的仅考虑当前类的字段，其它情况会考虑当前类实现的接口以及其父类的字段</li><li>获取字段：getField()、getDeclaredField()</li><li>获取字段的值：readStaticField()、readDeclaredStaticField()、readField()、readDeclaredField()</li><li>设置字段的值：writeStaticField()、writeDeclaredStaticField()、writeField()、writeDeclaredField()</li></ul><h3 id="classutils" tabindex="-1"><a class="header-anchor" href="#classutils"><span>ClassUtils</span></a></h3><h3 id="constructorutils" tabindex="-1"><a class="header-anchor" href="#constructorutils"><span>ConstructorUtils</span></a></h3><h3 id="memberutils" tabindex="-1"><a class="header-anchor" href="#memberutils"><span>MemberUtils</span></a></h3><ul><li>调用方法：invokeMethod()、invokeStaticMethod()</li></ul><h2 id="charutils" tabindex="-1"><a class="header-anchor" href="#charutils"><span>CharUtils</span></a></h2><ul><li><code>boolean isAscii(char ch)</code>：判断是否为 ASCII 字符，<code>ch &lt; 128</code></li><li><code>boolean isAsciiAlpha(char ch)</code>：判断是否为 ASCII 字母，<code>(ch &gt;= &#39;A&#39;&amp;&amp; ch &lt;= &#39;Z&#39;) || (ch &gt;= &#39;a&#39;&amp;&amp; CH &lt;= &#39;z&#39;)</code></li><li><code>Boolean isAsciiAlphaLower(char ch)</code>：判断是否为 ASCII 小写字母，即 a 到 z</li><li><code>boolean isAsciiAlphaUpper(char ch)</code>：判断是否为 ASCII 大写字母，即 A 到 Z</li><li><code>boolean isAsciiAlphanumeric(char ch)</code>：判断是否为 ASCII 字符数字，<code>(ch &gt;= &#39;A&#39;&amp;&amp; cn &lt;= &#39;Z&#39;) || (ch &gt;= &#39;a&#39;&amp;&amp; ch &lt;= &#39;z&#39;) || (ch &gt;= &#39;0&#39;&amp;&amp; ch &lt;= &#39;9&#39;)</code></li><li><code>boolean isAsciiNumeric(char ch)</code>：判断是否为数字</li><li><code>Boolean isAsciiControl(char ch)</code>：判断是否为控制字符，<code>ch &lt; 32 || ch = 127</code></li><li><code>Boolean isAsciiPrintable(char ch)</code>：判断是否可打印出得 ASCII 字符，<code>ch &gt;= 32 &amp;&amp; ch &lt; 127</code></li><li><code>int toIntValue(char ch)</code>：数字转换，<code>ch – 48</code></li><li><code>String unicodeEscaped(char ch)</code>：将 ch 转换为 unicode 表示的字符串形式</li></ul><h2 id="booleanutils" tabindex="-1"><a class="header-anchor" href="#booleanutils"><span>BooleanUtils</span></a></h2><ul><li><code>negate(Boolean bool)</code>：否定指定的 boolean 值</li><li><code>isTrue(Boolean bool)</code>：检查一个 boolean 值是否为 true，如果参数为 null，返回 false</li><li><code>isNotTrue(Boolean bool)</code>：检查一个 boolean 值是否为 false，如果参数为 null，返回 true</li><li><code>isFalse(Boolean bool)</code>：检查一个 boolean 值是否为 false，如果是返回 true，如果检查的值为 true 或 null 返回 false.</li><li><code>isNotFalse(Boolean bool)</code>：检查一个 boolean 值是否不为 false，如果是返回 true</li><li><code>toBoolean(Boolean bool)</code>：转换一个为 null 的 boolean 值，返回一个 false.</li><li><code>toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull)</code>：转换一个为 null 的 boolean 值，返回后面参数给定的 boolean 值.</li><li><code>toBoolean(int value)</code>：当参数为 0 是返回 false，其它都返回 true.</li><li><code>toBooleanObject(int value)</code>：当参数为 0 是返回 Boolean.FALSE 对象，其它都返回 Boolean.TRUE.</li><li><code>toBooleanObject(Integer value)</code>：当参数为 0 是返回 Boolean.FALSE 对象，为 null 返回 null</li><li><code>toBoolean(int value, int trueValue, int falseValue)</code>：如果第一个参数和第二个参数相等返回 true</li></ul><h2 id="exceptionutils" tabindex="-1"><a class="header-anchor" href="#exceptionutils"><span>ExceptionUtils</span></a></h2><ul><li>对异常的常见操作，获得堆栈，异常抛出方法名，错误链中对象数</li><li>Throwable getCauseUsingMethodName(Throwable throwable, String methodName)`：获取导致 Throwable 的 Throwable，可以设置自己制定的方法名称</li><li>Throwable getRootCause(Throwable throwable)`：获取导致 Throwable 的 Root Throwable</li><li>int getThrowableCount(Throwable throwable)`：统计异常链上的 Throwable 对象数量</li></ul>',31),n=[o];function c(r,d){return t(),l("div",null,n)}const u=e(i,[["render",c],["__file","index.html.vue"]]),h=JSON.parse(`{"path":"/notes/JavaSE/xyo8763r/","title":"CommonsLang常用类","lang":"zh-CN","frontmatter":{"title":"CommonsLang常用类","createTime":"2024/08/26 15:27:37","permalink":"/notes/JavaSE/xyo8763r/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"StringUtils","slug":"stringutils","link":"#stringutils","children":[]},{"level":2,"title":"StringEscapeUtils","slug":"stringescapeutils","link":"#stringescapeutils","children":[]},{"level":2,"title":"ArrayUtils","slug":"arrayutils","link":"#arrayutils","children":[]},{"level":2,"title":"DateUtils","slug":"dateutils","link":"#dateutils","children":[]},{"level":2,"title":"DateFormatUtils","slug":"dateformatutils","link":"#dateformatutils","children":[]},{"level":2,"title":"NumberUtils","slug":"numberutils","link":"#numberutils","children":[]},{"level":2,"title":"RandomUtils","slug":"randomutils","link":"#randomutils","children":[]},{"level":2,"title":"RandomStringUtils","slug":"randomstringutils","link":"#randomstringutils","children":[]},{"level":2,"title":"StopWatch","slug":"stopwatch","link":"#stopwatch","children":[]},{"level":2,"title":"Pair\\\\、Triple\\\\","slug":"pair-、triple","link":"#pair-、triple","children":[]},{"level":2,"title":"反射相关","slug":"反射相关","link":"#反射相关","children":[{"level":3,"title":"FieldUtils","slug":"fieldutils","link":"#fieldutils","children":[]},{"level":3,"title":"ClassUtils","slug":"classutils","link":"#classutils","children":[]},{"level":3,"title":"ConstructorUtils","slug":"constructorutils","link":"#constructorutils","children":[]},{"level":3,"title":"MemberUtils","slug":"memberutils","link":"#memberutils","children":[]}]},{"level":2,"title":"CharUtils","slug":"charutils","link":"#charutils","children":[]},{"level":2,"title":"BooleanUtils","slug":"booleanutils","link":"#booleanutils","children":[]},{"level":2,"title":"ExceptionUtils","slug":"exceptionutils","link":"#exceptionutils","children":[]}],"readingTime":{"minutes":6.71,"words":2013},"git":{"createdTime":1724666056000,"updatedTime":1725207483000,"contributors":[{"name":"chgoh7","email":"3180349973@qq.com","commits":1}]},"filePathRelative":"notes/JavaSE/06 常用类库/CommonsLang常用类.md"}`);export{u as comp,h as data};
